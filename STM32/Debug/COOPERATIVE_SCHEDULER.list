
COOPERATIVE_SCHEDULER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a0c  08003a0c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a0c  08003a0c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a0c  08003a0c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08003a70  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08003a70  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e18  00000000  00000000  0002c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002df10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  0002eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017aa4  00000000  00000000  0002f57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e78b  00000000  00000000  00047021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000881ba  00000000  00000000  000557ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000391c  00000000  00000000  000dd968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e1284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800398c 	.word	0x0800398c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800398c 	.word	0x0800398c

0800014c <timePrint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timePrint(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af00      	add	r7, sp, #0
	char str[100];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "%lu\r\n", HAL_GetTick()), 1000);
 8000152:	f000 fdd5 	bl	8000d00 <HAL_GetTick>
 8000156:	4602      	mov	r2, r0
 8000158:	1d3b      	adds	r3, r7, #4
 800015a:	4908      	ldr	r1, [pc, #32]	; (800017c <timePrint+0x30>)
 800015c:	4618      	mov	r0, r3
 800015e:	f002 ff63 	bl	8003028 <siprintf>
 8000162:	4603      	mov	r3, r0
 8000164:	b29a      	uxth	r2, r3
 8000166:	1d39      	adds	r1, r7, #4
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	4804      	ldr	r0, [pc, #16]	; (8000180 <timePrint+0x34>)
 800016e:	f002 f987 	bl	8002480 <HAL_UART_Transmit>
}
 8000172:	bf00      	nop
 8000174:	3768      	adds	r7, #104	; 0x68
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	080039a4 	.word	0x080039a4
 8000180:	20000108 	.word	0x20000108

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f000 fd62 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 f84e 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f94c 	bl	800042c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000194:	f000 f886 	bl	80002a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f91e 	bl	80003d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800019c:	f000 f8ce 	bl	800033c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001a0:	4819      	ldr	r0, [pc, #100]	; (8000208 <main+0x84>)
 80001a2:	f001 fd85 	bl	8001cb0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001a6:	4819      	ldr	r0, [pc, #100]	; (800020c <main+0x88>)
 80001a8:	f001 fd82 	bl	8001cb0 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80001ac:	f000 f9c6 	bl	800053c <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(ledRedToggle, 1000, 0);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001b6:	4816      	ldr	r0, [pc, #88]	; (8000210 <main+0x8c>)
 80001b8:	f000 fa5e 	bl	8000678 <SCH_AddTask>
  SCH_AddTask(ledYellowToggle, 0, 500);
 80001bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c0:	2100      	movs	r1, #0
 80001c2:	4814      	ldr	r0, [pc, #80]	; (8000214 <main+0x90>)
 80001c4:	f000 fa58 	bl	8000678 <SCH_AddTask>
  SCH_AddTask(ledGreenToggle, 0, 1000);
 80001c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001cc:	2100      	movs	r1, #0
 80001ce:	4812      	ldr	r0, [pc, #72]	; (8000218 <main+0x94>)
 80001d0:	f000 fa52 	bl	8000678 <SCH_AddTask>
  SCH_AddTask(ledAquaToggle, 0, 1500);
 80001d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001d8:	2100      	movs	r1, #0
 80001da:	4810      	ldr	r0, [pc, #64]	; (800021c <main+0x98>)
 80001dc:	f000 fa4c 	bl	8000678 <SCH_AddTask>
  SCH_AddTask(ledBlueToggle, 0, 2000);
 80001e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80001e4:	2100      	movs	r1, #0
 80001e6:	480e      	ldr	r0, [pc, #56]	; (8000220 <main+0x9c>)
 80001e8:	f000 fa46 	bl	8000678 <SCH_AddTask>
  SCH_AddTask(ledPinkToggle, 0, 2500);
 80001ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80001f0:	2100      	movs	r1, #0
 80001f2:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0xa0>)
 80001f4:	f000 fa40 	bl	8000678 <SCH_AddTask>
  SCH_AddTask(timePrint, 0, 10);
 80001f8:	220a      	movs	r2, #10
 80001fa:	2100      	movs	r1, #0
 80001fc:	480a      	ldr	r0, [pc, #40]	; (8000228 <main+0xa4>)
 80001fe:	f000 fa3b 	bl	8000678 <SCH_AddTask>
  while (1)
  {
	  SCH_Dispatch();
 8000202:	f000 fa0b 	bl	800061c <SCH_Dispatch>
 8000206:	e7fc      	b.n	8000202 <main+0x7e>
 8000208:	20000078 	.word	0x20000078
 800020c:	200000c0 	.word	0x200000c0
 8000210:	080004bd 	.word	0x080004bd
 8000214:	080004d1 	.word	0x080004d1
 8000218:	080004e5 	.word	0x080004e5
 800021c:	080004f9 	.word	0x080004f9
 8000220:	0800050d 	.word	0x0800050d
 8000224:	08000525 	.word	0x08000525
 8000228:	0800014d 	.word	0x0800014d

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 ff14 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f8c4 	bl	80013f0 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026e:	f000 f920 	bl	80004b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fb32 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000296:	f000 f90c 	bl	80004b2 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c0:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <MX_TIM2_Init+0x94>)
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_TIM2_Init+0x94>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <MX_TIM2_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_TIM2_Init+0x94>)
 80002d6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80002da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <MX_TIM2_Init+0x94>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_TIM2_Init+0x94>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e8:	4813      	ldr	r0, [pc, #76]	; (8000338 <MX_TIM2_Init+0x94>)
 80002ea:	f001 fc91 	bl	8001c10 <HAL_TIM_Base_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002f4:	f000 f8dd 	bl	80004b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	4619      	mov	r1, r3
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <MX_TIM2_Init+0x94>)
 8000306:	f001 fe27 	bl	8001f58 <HAL_TIM_ConfigClockSource>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000310:	f000 f8cf 	bl	80004b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000314:	2300      	movs	r3, #0
 8000316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000318:	2300      	movs	r3, #0
 800031a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031c:	463b      	mov	r3, r7
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_TIM2_Init+0x94>)
 8000322:	f001 fff3 	bl	800230c <HAL_TIMEx_MasterConfigSynchronization>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800032c:	f000 f8c1 	bl	80004b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000078 	.word	0x20000078

0800033c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_TIM3_Init+0x94>)
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <MX_TIM3_Init+0x98>)
 800035c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <MX_TIM3_Init+0x94>)
 8000360:	223f      	movs	r2, #63	; 0x3f
 8000362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_TIM3_Init+0x94>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_TIM3_Init+0x94>)
 800036c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_TIM3_Init+0x94>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_TIM3_Init+0x94>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800037e:	4814      	ldr	r0, [pc, #80]	; (80003d0 <MX_TIM3_Init+0x94>)
 8000380:	f001 fc46 	bl	8001c10 <HAL_TIM_Base_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800038a:	f000 f892 	bl	80004b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000394:	f107 0308 	add.w	r3, r7, #8
 8000398:	4619      	mov	r1, r3
 800039a:	480d      	ldr	r0, [pc, #52]	; (80003d0 <MX_TIM3_Init+0x94>)
 800039c:	f001 fddc 	bl	8001f58 <HAL_TIM_ConfigClockSource>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f884 	bl	80004b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003b2:	463b      	mov	r3, r7
 80003b4:	4619      	mov	r1, r3
 80003b6:	4806      	ldr	r0, [pc, #24]	; (80003d0 <MX_TIM3_Init+0x94>)
 80003b8:	f001 ffa8 	bl	800230c <HAL_TIMEx_MasterConfigSynchronization>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003c2:	f000 f876 	bl	80004b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200000c0 	.word	0x200000c0
 80003d4:	40000400 	.word	0x40000400

080003d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <MX_USART2_UART_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_USART2_UART_Init+0x4c>)
 8000410:	f001 ffe6 	bl	80023e0 <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041a:	f000 f84a 	bl	80004b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000108 	.word	0x20000108
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_GPIO_Init+0x60>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a11      	ldr	r2, [pc, #68]	; (800048c <MX_GPIO_Init+0x60>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_GPIO_Init+0x60>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_AQUA_Pin
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800045e:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_GPIO_Init+0x64>)
 8000460:	f000 ff94 	bl	800138c <HAL_GPIO_WritePin>
                          |LED_BLUE_Pin|LED_PINK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_AQUA_Pin
                           LED_BLUE_Pin LED_PINK_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_AQUA_Pin
 8000464:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000468:	60bb      	str	r3, [r7, #8]
                          |LED_BLUE_Pin|LED_PINK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800046e:	2301      	movs	r3, #1
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2302      	movs	r3, #2
 8000474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	4619      	mov	r1, r3
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_GPIO_Init+0x64>)
 800047e:	f000 fe09 	bl	8001094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800

08000494 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004a4:	d101      	bne.n	80004aa <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80004a6:	f000 f893 	bl	80005d0 <SCH_Update>
	}
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b6:	b672      	cpsid	i
}
 80004b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ba:	e7fe      	b.n	80004ba <Error_Handler+0x8>

080004bc <ledRedToggle>:
 *      Author: Nhat Khai
 */

#include "output.h"

void ledRedToggle(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80004c0:	2110      	movs	r1, #16
 80004c2:	4802      	ldr	r0, [pc, #8]	; (80004cc <ledRedToggle+0x10>)
 80004c4:	f000 ff7a 	bl	80013bc <HAL_GPIO_TogglePin>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40010800 	.word	0x40010800

080004d0 <ledYellowToggle>:

void ledYellowToggle(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80004d4:	2120      	movs	r1, #32
 80004d6:	4802      	ldr	r0, [pc, #8]	; (80004e0 <ledYellowToggle+0x10>)
 80004d8:	f000 ff70 	bl	80013bc <HAL_GPIO_TogglePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010800 	.word	0x40010800

080004e4 <ledGreenToggle>:

void ledGreenToggle(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	4802      	ldr	r0, [pc, #8]	; (80004f4 <ledGreenToggle+0x10>)
 80004ec:	f000 ff66 	bl	80013bc <HAL_GPIO_TogglePin>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010800 	.word	0x40010800

080004f8 <ledAquaToggle>:

void ledAquaToggle(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_AQUA_GPIO_Port, LED_AQUA_Pin);
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	4802      	ldr	r0, [pc, #8]	; (8000508 <ledAquaToggle+0x10>)
 8000500:	f000 ff5c 	bl	80013bc <HAL_GPIO_TogglePin>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010800 	.word	0x40010800

0800050c <ledBlueToggle>:

void ledBlueToggle(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <ledBlueToggle+0x14>)
 8000516:	f000 ff51 	bl	80013bc <HAL_GPIO_TogglePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010800 	.word	0x40010800

08000524 <ledPinkToggle>:

void ledPinkToggle(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_PINK_GPIO_Port, LED_PINK_Pin);
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <ledPinkToggle+0x14>)
 800052e:	f000 ff45 	bl	80013bc <HAL_GPIO_TogglePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010800 	.word	0x40010800

0800053c <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000542:	2300      	movs	r3, #0
 8000544:	71fb      	strb	r3, [r7, #7]
 8000546:	e037      	b.n	80005b8 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	4920      	ldr	r1, [pc, #128]	; (80005cc <SCH_Init+0x90>)
 800054c:	4613      	mov	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4413      	add	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	440b      	add	r3, r1
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 800055a:	79fa      	ldrb	r2, [r7, #7]
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f1c3 0307 	rsb	r3, r3, #7
 8000562:	b2d8      	uxtb	r0, r3
 8000564:	4919      	ldr	r1, [pc, #100]	; (80005cc <SCH_Init+0x90>)
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	3304      	adds	r3, #4
 8000572:	4602      	mov	r2, r0
 8000574:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000576:	79fa      	ldrb	r2, [r7, #7]
 8000578:	4914      	ldr	r1, [pc, #80]	; (80005cc <SCH_Init+0x90>)
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	3308      	adds	r3, #8
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	490f      	ldr	r1, [pc, #60]	; (80005cc <SCH_Init+0x90>)
 800058e:	4613      	mov	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	440b      	add	r3, r1
 8000598:	330c      	adds	r3, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	490a      	ldr	r1, [pc, #40]	; (80005cc <SCH_Init+0x90>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	3310      	adds	r3, #16
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	3301      	adds	r3, #1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	d9c4      	bls.n	8000548 <SCH_Init+0xc>
    }
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000150 	.word	0x20000150

080005d0 <SCH_Update>:

void SCH_Update(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <SCH_Update+0x48>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d018      	beq.n	800060e <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <SCH_Update+0x48>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00c      	beq.n	80005fe <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <SCH_Update+0x48>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	2b0a      	cmp	r3, #10
 80005ea:	d905      	bls.n	80005f8 <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <SCH_Update+0x48>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	3b0a      	subs	r3, #10
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <SCH_Update+0x48>)
 80005f4:	6093      	str	r3, [r2, #8]
 80005f6:	e002      	b.n	80005fe <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <SCH_Update+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <SCH_Update+0x48>)
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d104      	bne.n	8000610 <SCH_Update+0x40>
		tasks[0].flag = 1;
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SCH_Update+0x48>)
 8000608:	2201      	movs	r2, #1
 800060a:	741a      	strb	r2, [r3, #16]
 800060c:	e000      	b.n	8000610 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 800060e:	bf00      	nop
	}
}
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000150 	.word	0x20000150

0800061c <SCH_Dispatch>:

void SCH_Dispatch(void) {
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
	if (tasks[0].functionPointer == 0) return;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <SCH_Dispatch+0x58>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d01f      	beq.n	800066a <SCH_Dispatch+0x4e>
    if (tasks[0].flag == 1) {
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <SCH_Dispatch+0x58>)
 800062c:	7c1b      	ldrb	r3, [r3, #16]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d11c      	bne.n	800066c <SCH_Dispatch+0x50>
        (*tasks[0].functionPointer)();
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <SCH_Dispatch+0x58>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4798      	blx	r3
        tasks[0].flag = 0;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <SCH_Dispatch+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	741a      	strb	r2, [r3, #16]
        SCH_Task newTask = tasks[0];
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <SCH_Dispatch+0x58>)
 8000640:	1d3c      	adds	r4, r7, #4
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	6023      	str	r3, [r4, #0]
        SCH_DeleteTask(tasks[0].id);
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <SCH_Dispatch+0x58>)
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f917 	bl	8000884 <SCH_DeleteTask>
        if (newTask.period > 0) {
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d007      	beq.n	800066c <SCH_Dispatch+0x50>
            SCH_AddTask(newTask.functionPointer, newTask.period, newTask.period);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6939      	ldr	r1, [r7, #16]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f808 	bl	8000678 <SCH_AddTask>
 8000668:	e000      	b.n	800066c <SCH_Dispatch+0x50>
	if (tasks[0].functionPointer == 0) return;
 800066a:	bf00      	nop
        }
    }
}
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bdb0      	pop	{r4, r5, r7, pc}
 8000672:	bf00      	nop
 8000674:	20000150 	.word	0x20000150

08000678 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8000678:	b4b0      	push	{r4, r5, r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 8000684:	4b7e      	ldr	r3, [pc, #504]	; (8000880 <SCH_AddTask+0x208>)
 8000686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SCH_AddTask+0x1a>
 800068e:	2308      	movs	r3, #8
 8000690:	e0f1      	b.n	8000876 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8000692:	4b7b      	ldr	r3, [pc, #492]	; (8000880 <SCH_AddTask+0x208>)
 8000694:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000698:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	76fb      	strb	r3, [r7, #27]
 80006a2:	e0e3      	b.n	800086c <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 80006a4:	7efa      	ldrb	r2, [r7, #27]
 80006a6:	4976      	ldr	r1, [pc, #472]	; (8000880 <SCH_AddTask+0x208>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	3308      	adds	r3, #8
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 80006bc:	69fa      	ldr	r2, [r7, #28]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d80a      	bhi.n	80006da <SCH_AddTask+0x62>
 80006c4:	7efa      	ldrb	r2, [r7, #27]
 80006c6:	496e      	ldr	r1, [pc, #440]	; (8000880 <SCH_AddTask+0x208>)
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	440b      	add	r3, r1
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f040 80c6 	bne.w	8000866 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 80006da:	2307      	movs	r3, #7
 80006dc:	76bb      	strb	r3, [r7, #26]
 80006de:	e017      	b.n	8000710 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 80006e0:	7ebb      	ldrb	r3, [r7, #26]
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	7eb9      	ldrb	r1, [r7, #26]
 80006e6:	4866      	ldr	r0, [pc, #408]	; (8000880 <SCH_AddTask+0x208>)
 80006e8:	460b      	mov	r3, r1
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4418      	add	r0, r3
 80006f2:	4963      	ldr	r1, [pc, #396]	; (8000880 <SCH_AddTask+0x208>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	4604      	mov	r4, r0
 8000700:	461d      	mov	r5, r3
 8000702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000706:	682b      	ldr	r3, [r5, #0]
 8000708:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 800070a:	7ebb      	ldrb	r3, [r7, #26]
 800070c:	3b01      	subs	r3, #1
 800070e:	76bb      	strb	r3, [r7, #26]
 8000710:	7eba      	ldrb	r2, [r7, #26]
 8000712:	7efb      	ldrb	r3, [r7, #27]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8e3      	bhi.n	80006e0 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8000718:	7efa      	ldrb	r2, [r7, #27]
 800071a:	4959      	ldr	r1, [pc, #356]	; (8000880 <SCH_AddTask+0x208>)
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 800072a:	7efa      	ldrb	r2, [r7, #27]
 800072c:	4954      	ldr	r1, [pc, #336]	; (8000880 <SCH_AddTask+0x208>)
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	440b      	add	r3, r1
 8000738:	3304      	adds	r3, #4
 800073a:	7e7a      	ldrb	r2, [r7, #25]
 800073c:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 800073e:	7efa      	ldrb	r2, [r7, #27]
 8000740:	494f      	ldr	r1, [pc, #316]	; (8000880 <SCH_AddTask+0x208>)
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	330c      	adds	r3, #12
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8000752:	7efa      	ldrb	r2, [r7, #27]
 8000754:	494a      	ldr	r1, [pc, #296]	; (8000880 <SCH_AddTask+0x208>)
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	3310      	adds	r3, #16
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000766:	69fa      	ldr	r2, [r7, #28]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	429a      	cmp	r2, r3
 800076c:	d950      	bls.n	8000810 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 800076e:	69fa      	ldr	r2, [r7, #28]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000776:	7efb      	ldrb	r3, [r7, #27]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	4941      	ldr	r1, [pc, #260]	; (8000880 <SCH_AddTask+0x208>)
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	3308      	adds	r3, #8
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	7efa      	ldrb	r2, [r7, #27]
 800078e:	1ac9      	subs	r1, r1, r3
 8000790:	483b      	ldr	r0, [pc, #236]	; (8000880 <SCH_AddTask+0x208>)
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4403      	add	r3, r0
 800079c:	3308      	adds	r3, #8
 800079e:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80007a0:	7efa      	ldrb	r2, [r7, #27]
 80007a2:	4937      	ldr	r1, [pc, #220]	; (8000880 <SCH_AddTask+0x208>)
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	440b      	add	r3, r1
 80007ae:	3308      	adds	r3, #8
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d109      	bne.n	80007ca <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 80007b6:	7efa      	ldrb	r2, [r7, #27]
 80007b8:	4931      	ldr	r1, [pc, #196]	; (8000880 <SCH_AddTask+0x208>)
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 80007ca:	7efb      	ldrb	r3, [r7, #27]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	6979      	ldr	r1, [r7, #20]
 80007d0:	482b      	ldr	r0, [pc, #172]	; (8000880 <SCH_AddTask+0x208>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4403      	add	r3, r0
 80007dc:	3308      	adds	r3, #8
 80007de:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 80007e0:	7efb      	ldrb	r3, [r7, #27]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	4926      	ldr	r1, [pc, #152]	; (8000880 <SCH_AddTask+0x208>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	3308      	adds	r3, #8
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12c      	bne.n	8000852 <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 80007f8:	7efb      	ldrb	r3, [r7, #27]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	4920      	ldr	r1, [pc, #128]	; (8000880 <SCH_AddTask+0x208>)
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	3310      	adds	r3, #16
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	e020      	b.n	8000852 <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8000810:	7efa      	ldrb	r2, [r7, #27]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	1ac9      	subs	r1, r1, r3
 8000818:	4819      	ldr	r0, [pc, #100]	; (8000880 <SCH_AddTask+0x208>)
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4403      	add	r3, r0
 8000824:	3308      	adds	r3, #8
 8000826:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000828:	7efa      	ldrb	r2, [r7, #27]
 800082a:	4915      	ldr	r1, [pc, #84]	; (8000880 <SCH_AddTask+0x208>)
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	3308      	adds	r3, #8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d109      	bne.n	8000852 <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 800083e:	7efa      	ldrb	r2, [r7, #27]
 8000840:	490f      	ldr	r1, [pc, #60]	; (8000880 <SCH_AddTask+0x208>)
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	3310      	adds	r3, #16
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8000852:	7efa      	ldrb	r2, [r7, #27]
 8000854:	490a      	ldr	r1, [pc, #40]	; (8000880 <SCH_AddTask+0x208>)
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	440b      	add	r3, r1
 8000860:	3304      	adds	r3, #4
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	e007      	b.n	8000876 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000866:	7efb      	ldrb	r3, [r7, #27]
 8000868:	3301      	adds	r3, #1
 800086a:	76fb      	strb	r3, [r7, #27]
 800086c:	7efb      	ldrb	r3, [r7, #27]
 800086e:	2b07      	cmp	r3, #7
 8000870:	f67f af18 	bls.w	80006a4 <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8000874:	2308      	movs	r3, #8
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bcb0      	pop	{r4, r5, r7}
 800087e:	4770      	bx	lr
 8000880:	20000150 	.word	0x20000150

08000884 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8000884:	b4b0      	push	{r4, r5, r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e075      	b.n	8000980 <SCH_DeleteTask+0xfc>
        if (tasks[i].id == id) {
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	493f      	ldr	r1, [pc, #252]	; (8000994 <SCH_DeleteTask+0x110>)
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	3304      	adds	r3, #4
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d166      	bne.n	800097a <SCH_DeleteTask+0xf6>
            uint8_t currentID = tasks[i].id;
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	4939      	ldr	r1, [pc, #228]	; (8000994 <SCH_DeleteTask+0x110>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	3304      	adds	r3, #4
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	4933      	ldr	r1, [pc, #204]	; (8000994 <SCH_DeleteTask+0x110>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d01d      	beq.n	8000912 <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	492e      	ldr	r1, [pc, #184]	; (8000994 <SCH_DeleteTask+0x110>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	3308      	adds	r3, #8
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <SCH_DeleteTask+0x110>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4403      	add	r3, r0
 80008f8:	3308      	adds	r3, #8
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	7bfa      	ldrb	r2, [r7, #15]
 80008fe:	3201      	adds	r2, #1
 8000900:	4419      	add	r1, r3
 8000902:	4824      	ldr	r0, [pc, #144]	; (8000994 <SCH_DeleteTask+0x110>)
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4403      	add	r3, r0
 800090e:	3308      	adds	r3, #8
 8000910:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	73bb      	strb	r3, [r7, #14]
 8000916:	e017      	b.n	8000948 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	7bb9      	ldrb	r1, [r7, #14]
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <SCH_DeleteTask+0x110>)
 8000920:	460b      	mov	r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4418      	add	r0, r3
 800092a:	491a      	ldr	r1, [pc, #104]	; (8000994 <SCH_DeleteTask+0x110>)
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	4604      	mov	r4, r0
 8000938:	461d      	mov	r5, r3
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	3301      	adds	r3, #1
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	2b06      	cmp	r3, #6
 800094c:	d9e4      	bls.n	8000918 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <SCH_DeleteTask+0x110>)
 8000950:	2200      	movs	r2, #0
 8000952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <SCH_DeleteTask+0x110>)
 8000958:	7b7b      	ldrb	r3, [r7, #13]
 800095a:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <SCH_DeleteTask+0x110>)
 8000960:	2200      	movs	r2, #0
 8000962:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <SCH_DeleteTask+0x110>)
 8000968:	2200      	movs	r2, #0
 800096a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <SCH_DeleteTask+0x110>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            return 1;
 8000976:	2301      	movs	r3, #1
 8000978:	e006      	b.n	8000988 <SCH_DeleteTask+0x104>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	3301      	adds	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d986      	bls.n	8000894 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bcb0      	pop	{r4, r5, r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000150 	.word	0x20000150

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_MspInit+0x40>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_MspInit+0x40>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_MspInit+0x40>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_MspInit+0x40>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_MspInit+0x40>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_MspInit+0x40>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d114      	bne.n	8000a18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_TIM_Base_MspInit+0x78>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <HAL_TIM_Base_MspInit+0x78>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_TIM_Base_MspInit+0x78>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	201c      	movs	r0, #28
 8000a0c:	f000 fa59 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a10:	201c      	movs	r0, #28
 8000a12:	f000 fa72 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a16:	e018      	b.n	8000a4a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_TIM_Base_MspInit+0x7c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d113      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_TIM_Base_MspInit+0x78>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_TIM_Base_MspInit+0x78>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x78>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	201d      	movs	r0, #29
 8000a40:	f000 fa3f 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a44:	201d      	movs	r0, #29
 8000a46:	f000 fa58 	bl	8000efa <HAL_NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40000400 	.word	0x40000400

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d137      	bne.n	8000aec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a86:	61d3      	str	r3, [r2, #28]
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aac:	2304      	movs	r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	480f      	ldr	r0, [pc, #60]	; (8000afc <HAL_UART_MspInit+0xa0>)
 8000ac0:	f000 fae8 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <HAL_UART_MspInit+0xa0>)
 8000ad8:	f000 fadc 	bl	8001094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2026      	movs	r0, #38	; 0x26
 8000ae2:	f000 f9ee 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae6:	2026      	movs	r0, #38	; 0x26
 8000ae8:	f000 fa07 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010800 	.word	0x40010800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f8c9 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM2_IRQHandler+0x10>)
 8000b56:	f001 f8f7 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000078 	.word	0x20000078

08000b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM3_IRQHandler+0x10>)
 8000b6a:	f001 f8ed 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c0 	.word	0x200000c0

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f001 fd03 	bl	8002588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000108 	.word	0x20000108

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 fa5c 	bl	8003078 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20002800 	.word	0x20002800
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	200001f0 	.word	0x200001f0
 8000bf4:	20000340 	.word	0x20000340

08000bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff fff8 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c20:	4c09      	ldr	r4, [pc, #36]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 fa29 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff faa7 	bl	8000184 <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c40:	08003a14 	.word	0x08003a14
  ldr r2, =_sbss
 8000c44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c48:	20000340 	.word	0x20000340

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f923 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe94 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f93b 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f903 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200001f4 	.word	0x200001f4

08000d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	200001f4 	.word	0x200001f4

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d008      	beq.n	8000f58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e020      	b.n	8000f9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 020e 	bic.w	r2, r2, #14
 8000f66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d005      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e051      	b.n	800106c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 020e 	bic.w	r2, r2, #14
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_DMA_Abort_IT+0xd4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d029      	beq.n	8001046 <HAL_DMA_Abort_IT+0xa2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_DMA_Abort_IT+0xd8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d022      	beq.n	8001042 <HAL_DMA_Abort_IT+0x9e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_DMA_Abort_IT+0xdc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01a      	beq.n	800103c <HAL_DMA_Abort_IT+0x98>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <HAL_DMA_Abort_IT+0xe0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d012      	beq.n	8001036 <HAL_DMA_Abort_IT+0x92>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <HAL_DMA_Abort_IT+0xe4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00a      	beq.n	8001030 <HAL_DMA_Abort_IT+0x8c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_DMA_Abort_IT+0xe8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d102      	bne.n	800102a <HAL_DMA_Abort_IT+0x86>
 8001024:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001028:	e00e      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 800102a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800102e:	e00b      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	e008      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	e005      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001040:	e002      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001042:	2310      	movs	r3, #16
 8001044:	e000      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001046:	2301      	movs	r3, #1
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <HAL_DMA_Abort_IT+0xec>)
 800104a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
    } 
  }
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020008 	.word	0x40020008
 800107c:	4002001c 	.word	0x4002001c
 8001080:	40020030 	.word	0x40020030
 8001084:	40020044 	.word	0x40020044
 8001088:	40020058 	.word	0x40020058
 800108c:	4002006c 	.word	0x4002006c
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b08b      	sub	sp, #44	; 0x2c
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e161      	b.n	800136c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8150 	bne.w	8001366 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a97      	ldr	r2, [pc, #604]	; (8001328 <HAL_GPIO_Init+0x294>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05e      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010d0:	4a95      	ldr	r2, [pc, #596]	; (8001328 <HAL_GPIO_Init+0x294>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d875      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010d6:	4a95      	ldr	r2, [pc, #596]	; (800132c <HAL_GPIO_Init+0x298>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d058      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010dc:	4a93      	ldr	r2, [pc, #588]	; (800132c <HAL_GPIO_Init+0x298>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d86f      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010e2:	4a93      	ldr	r2, [pc, #588]	; (8001330 <HAL_GPIO_Init+0x29c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d052      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010e8:	4a91      	ldr	r2, [pc, #580]	; (8001330 <HAL_GPIO_Init+0x29c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d869      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010ee:	4a91      	ldr	r2, [pc, #580]	; (8001334 <HAL_GPIO_Init+0x2a0>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04c      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010f4:	4a8f      	ldr	r2, [pc, #572]	; (8001334 <HAL_GPIO_Init+0x2a0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d863      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010fa:	4a8f      	ldr	r2, [pc, #572]	; (8001338 <HAL_GPIO_Init+0x2a4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d046      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 8001100:	4a8d      	ldr	r2, [pc, #564]	; (8001338 <HAL_GPIO_Init+0x2a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d85d      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d82a      	bhi.n	8001160 <HAL_GPIO_Init+0xcc>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d859      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <HAL_GPIO_Init+0x80>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800118f 	.word	0x0800118f
 8001118:	08001169 	.word	0x08001169
 800111c:	0800117b 	.word	0x0800117b
 8001120:	080011bd 	.word	0x080011bd
 8001124:	080011c3 	.word	0x080011c3
 8001128:	080011c3 	.word	0x080011c3
 800112c:	080011c3 	.word	0x080011c3
 8001130:	080011c3 	.word	0x080011c3
 8001134:	080011c3 	.word	0x080011c3
 8001138:	080011c3 	.word	0x080011c3
 800113c:	080011c3 	.word	0x080011c3
 8001140:	080011c3 	.word	0x080011c3
 8001144:	080011c3 	.word	0x080011c3
 8001148:	080011c3 	.word	0x080011c3
 800114c:	080011c3 	.word	0x080011c3
 8001150:	080011c3 	.word	0x080011c3
 8001154:	080011c3 	.word	0x080011c3
 8001158:	08001171 	.word	0x08001171
 800115c:	08001185 	.word	0x08001185
 8001160:	4a76      	ldr	r2, [pc, #472]	; (800133c <HAL_GPIO_Init+0x2a8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001166:	e02c      	b.n	80011c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e029      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e024      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3308      	adds	r3, #8
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e01f      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	330c      	adds	r3, #12
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e01a      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001196:	2304      	movs	r3, #4
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e013      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	611a      	str	r2, [r3, #16]
          break;
 80011ae:	e009      	b.n	80011c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
          break;
 80011ba:	e003      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          break;
 80011c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d801      	bhi.n	80011ce <HAL_GPIO_Init+0x13a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e001      	b.n	80011d2 <HAL_GPIO_Init+0x13e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d802      	bhi.n	80011e0 <HAL_GPIO_Init+0x14c>
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x152>
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	3b08      	subs	r3, #8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	210f      	movs	r1, #15
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80a9 	beq.w	8001366 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001214:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a49      	ldr	r2, [pc, #292]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800122c:	4a45      	ldr	r2, [pc, #276]	; (8001344 <HAL_GPIO_Init+0x2b0>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <HAL_GPIO_Init+0x2b4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3c      	ldr	r2, [pc, #240]	; (800134c <HAL_GPIO_Init+0x2b8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x1dc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_GPIO_Init+0x1d8>
 8001268:	2302      	movs	r3, #2
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x1e2>
 800126c:	2303      	movs	r3, #3
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x1e2>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x1e2>
 8001274:	2300      	movs	r3, #0
 8001276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001286:	492f      	ldr	r1, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x2b0>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	492b      	ldr	r1, [pc, #172]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4927      	ldr	r1, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4921      	ldr	r1, [pc, #132]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60cb      	str	r3, [r1, #12]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	491d      	ldr	r1, [pc, #116]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4917      	ldr	r1, [pc, #92]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4913      	ldr	r1, [pc, #76]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 8001308:	4013      	ands	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01f      	beq.n	8001358 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	490d      	ldr	r1, [pc, #52]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e01f      	b.n	8001366 <HAL_GPIO_Init+0x2d2>
 8001326:	bf00      	nop
 8001328:	10320000 	.word	0x10320000
 800132c:	10310000 	.word	0x10310000
 8001330:	10220000 	.word	0x10220000
 8001334:	10210000 	.word	0x10210000
 8001338:	10120000 	.word	0x10120000
 800133c:	10110000 	.word	0x10110000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000
 8001354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4909      	ldr	r1, [pc, #36]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	f47f ae96 	bne.w	80010a8 <HAL_GPIO_Init+0x14>
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	372c      	adds	r7, #44	; 0x2c
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	611a      	str	r2, [r3, #16]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43d9      	mvns	r1, r3
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	400b      	ands	r3, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	611a      	str	r2, [r3, #16]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e272      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8087 	beq.w	800151e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001410:	4b92      	ldr	r3, [pc, #584]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b04      	cmp	r3, #4
 800141a:	d00c      	beq.n	8001436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800141c:	4b8f      	ldr	r3, [pc, #572]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d112      	bne.n	800144e <HAL_RCC_OscConfig+0x5e>
 8001428:	4b8c      	ldr	r3, [pc, #560]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d10b      	bne.n	800144e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d06c      	beq.n	800151c <HAL_RCC_OscConfig+0x12c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d168      	bne.n	800151c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e24c      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001456:	d106      	bne.n	8001466 <HAL_RCC_OscConfig+0x76>
 8001458:	4b80      	ldr	r3, [pc, #512]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a7f      	ldr	r2, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e02e      	b.n	80014c4 <HAL_RCC_OscConfig+0xd4>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x98>
 800146e:	4b7b      	ldr	r3, [pc, #492]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7a      	ldr	r2, [pc, #488]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a77      	ldr	r2, [pc, #476]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xd4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0xbc>
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a71      	ldr	r2, [pc, #452]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6f      	ldr	r3, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6e      	ldr	r2, [pc, #440]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xd4>
 80014ac:	4b6b      	ldr	r3, [pc, #428]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6a      	ldr	r2, [pc, #424]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b68      	ldr	r3, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a67      	ldr	r2, [pc, #412]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fc18 	bl	8000d00 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fc14 	bl	8000d00 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e200      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe4>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc04 	bl	8000d00 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fc00 	bl	8000d00 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1ec      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x10c>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d063      	beq.n	80015f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152a:	4b4c      	ldr	r3, [pc, #304]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001536:	4b49      	ldr	r3, [pc, #292]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x18c>
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x176>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e1c0      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4939      	ldr	r1, [pc, #228]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <HAL_RCC_OscConfig+0x270>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fbb9 	bl	8000d00 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fbb5 	bl	8000d00 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1a1      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4927      	ldr	r1, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x270>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb98 	bl	8000d00 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fb94 	bl	8000d00 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e180      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03a      	beq.n	8001674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d019      	beq.n	800163a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_RCC_OscConfig+0x274>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fb78 	bl	8000d00 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fb74 	bl	8000d00 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e160      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_RCC_OscConfig+0x26c>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f000 face 	bl	8001bd4 <RCC_Delay>
 8001638:	e01c      	b.n	8001674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_RCC_OscConfig+0x274>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb5e 	bl	8000d00 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001646:	e00f      	b.n	8001668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fb5a 	bl	8000d00 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d908      	bls.n	8001668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e146      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	42420000 	.word	0x42420000
 8001664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e9      	bne.n	8001648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a6 	beq.w	80017ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10d      	bne.n	80016ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a87      	ldr	r2, [pc, #540]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b85      	ldr	r3, [pc, #532]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b82      	ldr	r3, [pc, #520]	; (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d118      	bne.n	80016ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ba:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a7e      	ldr	r2, [pc, #504]	; (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb1b 	bl	8000d00 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff fb17 	bl	8000d00 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e103      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x4c8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x312>
 80016f4:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e02d      	b.n	800175e <HAL_RCC_OscConfig+0x36e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x334>
 800170a:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a69      	ldr	r2, [pc, #420]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a66      	ldr	r2, [pc, #408]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	e01c      	b.n	800175e <HAL_RCC_OscConfig+0x36e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b05      	cmp	r3, #5
 800172a:	d10c      	bne.n	8001746 <HAL_RCC_OscConfig+0x356>
 800172c:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a60      	ldr	r2, [pc, #384]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a5d      	ldr	r2, [pc, #372]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e00b      	b.n	800175e <HAL_RCC_OscConfig+0x36e>
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6213      	str	r3, [r2, #32]
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d015      	beq.n	8001792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff facb 	bl	8000d00 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fac7 	bl	8000d00 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0b1      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ee      	beq.n	800176e <HAL_RCC_OscConfig+0x37e>
 8001790:	e014      	b.n	80017bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fab5 	bl	8000d00 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fab1 	bl	8000d00 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e09b      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ee      	bne.n	800179a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d105      	bne.n	80017ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8087 	beq.w	80018e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d061      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d146      	bne.n	800187a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa85 	bl	8000d00 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fa:	f7ff fa81 	bl	8000d00 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e06d      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d108      	bne.n	8001834 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4921      	ldr	r1, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a19      	ldr	r1, [r3, #32]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	430b      	orrs	r3, r1
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x4cc>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fa55 	bl	8000d00 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fa51 	bl	8000d00 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e03d      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x46a>
 8001878:	e035      	b.n	80018e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_RCC_OscConfig+0x4cc>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fa3e 	bl	8000d00 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fa3a 	bl	8000d00 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e026      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x498>
 80018a6:	e01e      	b.n	80018e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e019      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x500>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0d0      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d910      	bls.n	8001938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4965      	ldr	r1, [pc, #404]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b8      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800195a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	494d      	ldr	r1, [pc, #308]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d040      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e073      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4936      	ldr	r1, [pc, #216]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f98c 	bl	8000d00 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f988 	bl	8000d00 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e053      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d210      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e032      	b.n	8001aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a82:	f000 f821 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	5ccb      	ldrb	r3, [r1, r3]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f8ea 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	080039ac 	.word	0x080039ac
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x30>
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x36>
 8001af6:	e027      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afa:	613b      	str	r3, [r7, #16]
      break;
 8001afc:	e027      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0c5b      	lsrs	r3, r3, #17
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2a:	fb03 f202 	mul.w	r2, r3, r2
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e004      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	613b      	str	r3, [r7, #16]
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	613b      	str	r3, [r7, #16]
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	693b      	ldr	r3, [r7, #16]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	080039c4 	.word	0x080039c4
 8001b68:	080039d4 	.word	0x080039d4
 8001b6c:	003d0900 	.word	0x003d0900

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff2 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	080039bc 	.word	0x080039bc

08001bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0adb      	lsrs	r3, r3, #11
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	080039bc 	.word	0x080039bc

08001bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <RCC_Delay+0x34>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <RCC_Delay+0x38>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf0:	bf00      	nop
  }
  while (Delay --);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <RCC_Delay+0x1c>
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fed0 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 fa6e 	bl	8002130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d001      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e035      	b.n	8001d34 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_TIM_Base_Start_IT+0x90>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d009      	beq.n	8001cfe <HAL_TIM_Base_Start_IT+0x4e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d004      	beq.n	8001cfe <HAL_TIM_Base_Start_IT+0x4e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <HAL_TIM_Base_Start_IT+0x94>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d111      	bne.n	8001d22 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d010      	beq.n	8001d32 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	e007      	b.n	8001d32 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40000400 	.word	0x40000400

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0202 	mvn.w	r2, #2
 8001d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f9b4 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f9a7 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9b6 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0204 	mvn.w	r2, #4
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f98a 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f97d 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f98c 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0208 	mvn.w	r2, #8
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f960 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f953 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f962 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0210 	mvn.w	r2, #16
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2208      	movs	r2, #8
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f936 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f929 	bl	80020e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f938 	bl	800210a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0201 	mvn.w	r2, #1
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fae4 	bl	8000494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa6b 	bl	80023ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8fc 	bl	800211c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0220 	mvn.w	r2, #32
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa36 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_TIM_ConfigClockSource+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0b4      	b.n	80020de <HAL_TIM_ConfigClockSource+0x186>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fac:	d03e      	beq.n	800202c <HAL_TIM_ConfigClockSource+0xd4>
 8001fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb2:	f200 8087 	bhi.w	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fba:	f000 8086 	beq.w	80020ca <HAL_TIM_ConfigClockSource+0x172>
 8001fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc2:	d87f      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b70      	cmp	r3, #112	; 0x70
 8001fc6:	d01a      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0xa6>
 8001fc8:	2b70      	cmp	r3, #112	; 0x70
 8001fca:	d87b      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fcc:	2b60      	cmp	r3, #96	; 0x60
 8001fce:	d050      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x11a>
 8001fd0:	2b60      	cmp	r3, #96	; 0x60
 8001fd2:	d877      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd4:	2b50      	cmp	r3, #80	; 0x50
 8001fd6:	d03c      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xfa>
 8001fd8:	2b50      	cmp	r3, #80	; 0x50
 8001fda:	d873      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d058      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0x13a>
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d86f      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fe4:	2b30      	cmp	r3, #48	; 0x30
 8001fe6:	d064      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x15a>
 8001fe8:	2b30      	cmp	r3, #48	; 0x30
 8001fea:	d86b      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d060      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x15a>
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d867      	bhi.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d05c      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x15a>
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d05a      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x15a>
 8001ffc:	e062      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800200e:	f000 f95e 	bl	80022ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	609a      	str	r2, [r3, #8]
      break;
 800202a:	e04f      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800203c:	f000 f947 	bl	80022ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800204e:	609a      	str	r2, [r3, #8]
      break;
 8002050:	e03c      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800205e:	461a      	mov	r2, r3
 8002060:	f000 f8be 	bl	80021e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2150      	movs	r1, #80	; 0x50
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f915 	bl	800229a <TIM_ITRx_SetConfig>
      break;
 8002070:	e02c      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800207e:	461a      	mov	r2, r3
 8002080:	f000 f8dc 	bl	800223c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2160      	movs	r1, #96	; 0x60
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f905 	bl	800229a <TIM_ITRx_SetConfig>
      break;
 8002090:	e01c      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800209e:	461a      	mov	r2, r3
 80020a0:	f000 f89e 	bl	80021e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2140      	movs	r1, #64	; 0x40
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f8f5 	bl	800229a <TIM_ITRx_SetConfig>
      break;
 80020b0:	e00c      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f000 f8ec 	bl	800229a <TIM_ITRx_SetConfig>
      break;
 80020c2:	e003      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      break;
 80020c8:	e000      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <TIM_Base_SetConfig+0xa8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <TIM_Base_SetConfig+0x28>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d003      	beq.n	8002158 <TIM_Base_SetConfig+0x28>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a22      	ldr	r2, [pc, #136]	; (80021dc <TIM_Base_SetConfig+0xac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d108      	bne.n	800216a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <TIM_Base_SetConfig+0xa8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_Base_SetConfig+0x52>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d003      	beq.n	8002182 <TIM_Base_SetConfig+0x52>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <TIM_Base_SetConfig+0xac>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <TIM_Base_SetConfig+0xa8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	615a      	str	r2, [r3, #20]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40000400 	.word	0x40000400

080021e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f023 0201 	bic.w	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800220a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f023 030a 	bic.w	r3, r3, #10
 800221c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0210 	bic.w	r2, r3, #16
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	031b      	lsls	r3, r3, #12
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002278:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f043 0307 	orr.w	r3, r3, #7
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	609a      	str	r2, [r3, #8]
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002320:	2302      	movs	r3, #2
 8002322:	e041      	b.n	80023a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d004      	beq.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10c      	bne.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002382:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	4313      	orrs	r3, r2
 800238c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e042      	b.n	8002478 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fb28 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	; 0x24
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fd71 	bl	8002f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	d16d      	bne.n	800257c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_UART_Transmit+0x2c>
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e066      	b.n	800257e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024be:	f7fe fc1f 	bl	8000d00 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d8:	d108      	bne.n	80024ec <HAL_UART_Transmit+0x6c>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e003      	b.n	80024f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024f4:	e02a      	b.n	800254c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 faf9 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e036      	b.n	800257e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3302      	adds	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e007      	b.n	800253e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1cf      	bne.n	80024f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fac9 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e006      	b.n	800257e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b0ba      	sub	sp, #232	; 0xe8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_UART_IRQHandler+0x66>
 80025da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fbd1 	bl	8002d8e <UART_Receive_IT>
      return;
 80025ec:	e25b      	b.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80de 	beq.w	80027b4 <HAL_UART_IRQHandler+0x22c>
 80025f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80d1 	beq.w	80027b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_UART_IRQHandler+0xae>
 800261e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_UART_IRQHandler+0xd2>
 8002642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_UART_IRQHandler+0xf6>
 8002666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f043 0204 	orr.w	r2, r3, #4
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d011      	beq.n	80026ae <HAL_UART_IRQHandler+0x126>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f043 0208 	orr.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 81f2 	beq.w	8002a9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_UART_IRQHandler+0x14e>
 80026c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fb5c 	bl	8002d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <HAL_UART_IRQHandler+0x17a>
 80026fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04f      	beq.n	80027a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa66 	bl	8002bd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d041      	beq.n	800279a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3314      	adds	r3, #20
 800271c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800272c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3314      	adds	r3, #20
 800273e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800274e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002752:	e841 2300 	strex	r3, r2, [r1]
 8002756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800275a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1d9      	bne.n	8002716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d013      	beq.n	8002792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	4a7e      	ldr	r2, [pc, #504]	; (8002968 <HAL_UART_IRQHandler+0x3e0>)
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fc14 	bl	8000fa4 <HAL_DMA_Abort_IT>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800278c:	4610      	mov	r0, r2
 800278e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	e00e      	b.n	80027b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f99c 	bl	8002ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	e00a      	b.n	80027b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f998 	bl	8002ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a0:	e006      	b.n	80027b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f994 	bl	8002ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80027ae:	e175      	b.n	8002a9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b0:	bf00      	nop
    return;
 80027b2:	e173      	b.n	8002a9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 814f 	bne.w	8002a5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8148 	beq.w	8002a5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8141 	beq.w	8002a5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80b6 	beq.w	800296c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800280c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8145 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800281a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800281e:	429a      	cmp	r2, r3
 8002820:	f080 813e 	bcs.w	8002aa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800282a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b20      	cmp	r3, #32
 8002834:	f000 8088 	beq.w	8002948 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800284e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002864:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002870:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002874:	e841 2300 	strex	r3, r2, [r1]
 8002878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800287c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1d9      	bne.n	8002838 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e1      	bne.n	8002884 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3314      	adds	r3, #20
 80028c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e3      	bne.n	80028c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002918:	f023 0310 	bic.w	r3, r3, #16
 800291c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800292a:	65ba      	str	r2, [r7, #88]	; 0x58
 800292c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002932:	e841 2300 	strex	r3, r2, [r1]
 8002936:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e3      	bne.n	8002906 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe faf3 	bl	8000f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002956:	b29b      	uxth	r3, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	b29b      	uxth	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8bf 	bl	8002ae2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002964:	e09c      	b.n	8002aa0 <HAL_UART_IRQHandler+0x518>
 8002966:	bf00      	nop
 8002968:	08002c99 	.word	0x08002c99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002974:	b29b      	uxth	r3, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 808e 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8089 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029b6:	647a      	str	r2, [r7, #68]	; 0x44
 80029b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e3      	bne.n	8002992 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	623b      	str	r3, [r7, #32]
   return(result);
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029ee:	633a      	str	r2, [r7, #48]	; 0x30
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e3      	bne.n	80029ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0310 	bic.w	r3, r3, #16
 8002a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a34:	61fa      	str	r2, [r7, #28]
 8002a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a38:	69b9      	ldr	r1, [r7, #24]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	617b      	str	r3, [r7, #20]
   return(result);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e3      	bne.n	8002a10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f844 	bl	8002ae2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a5a:	e023      	b.n	8002aa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_UART_IRQHandler+0x4f4>
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f923 	bl	8002cc0 <UART_Transmit_IT>
    return;
 8002a7a:	e014      	b.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f962 	bl	8002d5e <UART_EndTransmit_IT>
    return;
 8002a9a:	e004      	b.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a9c:	bf00      	nop
 8002a9e:	e002      	b.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002aa4:	bf00      	nop
  }
}
 8002aa6:	37e8      	adds	r7, #232	; 0xe8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b090      	sub	sp, #64	; 0x40
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b08:	e050      	b.n	8002bac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d04c      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b18:	f7fe f8f2 	bl	8000d00 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d241      	bcs.n	8002bac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b48:	637a      	str	r2, [r7, #52]	; 0x34
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e5      	bne.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3314      	adds	r3, #20
 8002b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b7c:	623a      	str	r2, [r7, #32]
 8002b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	69f9      	ldr	r1, [r7, #28]
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e5      	bne.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e00f      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d09f      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3740      	adds	r7, #64	; 0x40
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b095      	sub	sp, #84	; 0x54
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bfc:	643a      	str	r2, [r7, #64]	; 0x40
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c04:	e841 2300 	strex	r3, r2, [r1]
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e5      	bne.n	8002bdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3314      	adds	r3, #20
 8002c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e5      	bne.n	8002c10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d119      	bne.n	8002c80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0310 	bic.w	r3, r3, #16
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c6c:	61ba      	str	r2, [r7, #24]
 8002c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6979      	ldr	r1, [r7, #20]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c8e:	bf00      	nop
 8002c90:	3754      	adds	r7, #84	; 0x54
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7ff ff0c 	bl	8002ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b21      	cmp	r3, #33	; 0x21
 8002cd2:	d13e      	bne.n	8002d52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d114      	bne.n	8002d08 <UART_Transmit_IT+0x48>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d110      	bne.n	8002d08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	621a      	str	r2, [r3, #32]
 8002d06:	e008      	b.n	8002d1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	1c59      	adds	r1, r3, #1
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6211      	str	r1, [r2, #32]
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4619      	mov	r1, r3
 8002d28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fe94 	bl	8002aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08c      	sub	sp, #48	; 0x30
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b22      	cmp	r3, #34	; 0x22
 8002da0:	f040 80ae 	bne.w	8002f00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d117      	bne.n	8002dde <UART_Receive_IT+0x50>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d113      	bne.n	8002dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
 8002ddc:	e026      	b.n	8002e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d007      	beq.n	8002e02 <UART_Receive_IT+0x74>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <UART_Receive_IT+0x82>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e008      	b.n	8002e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d15d      	bne.n	8002efc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0220 	bic.w	r2, r2, #32
 8002e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d135      	bne.n	8002ef2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	623a      	str	r2, [r7, #32]
 8002eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	69f9      	ldr	r1, [r7, #28]
 8002eb2:	6a3a      	ldr	r2, [r7, #32]
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d10a      	bne.n	8002ee4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fdf9 	bl	8002ae2 <HAL_UARTEx_RxEventCallback>
 8002ef0:	e002      	b.n	8002ef8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fde3 	bl	8002abe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e002      	b.n	8002f02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3730      	adds	r7, #48	; 0x30
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f46:	f023 030c 	bic.w	r3, r3, #12
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <UART_SetConfig+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d103      	bne.n	8002f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f74:	f7fe fe1a 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	e002      	b.n	8002f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f7fe fe02 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8002f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <UART_SetConfig+0x118>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	0119      	lsls	r1, r3, #4
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <UART_SetConfig+0x118>)
 8002fba:	fba3 0302 	umull	r0, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2064      	movs	r0, #100	; 0x64
 8002fc2:	fb00 f303 	mul.w	r3, r0, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <UART_SetConfig+0x118>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	4419      	add	r1, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009a      	lsls	r2, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <UART_SetConfig+0x118>)
 8002ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2064      	movs	r0, #100	; 0x64
 8002ffa:	fb00 f303 	mul.w	r3, r0, r3
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	3332      	adds	r3, #50	; 0x32
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <UART_SetConfig+0x118>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	440a      	add	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40013800 	.word	0x40013800
 8003024:	51eb851f 	.word	0x51eb851f

08003028 <siprintf>:
 8003028:	b40e      	push	{r1, r2, r3}
 800302a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800302e:	b500      	push	{lr}
 8003030:	b09c      	sub	sp, #112	; 0x70
 8003032:	ab1d      	add	r3, sp, #116	; 0x74
 8003034:	9002      	str	r0, [sp, #8]
 8003036:	9006      	str	r0, [sp, #24]
 8003038:	9107      	str	r1, [sp, #28]
 800303a:	9104      	str	r1, [sp, #16]
 800303c:	4808      	ldr	r0, [pc, #32]	; (8003060 <siprintf+0x38>)
 800303e:	4909      	ldr	r1, [pc, #36]	; (8003064 <siprintf+0x3c>)
 8003040:	f853 2b04 	ldr.w	r2, [r3], #4
 8003044:	9105      	str	r1, [sp, #20]
 8003046:	6800      	ldr	r0, [r0, #0]
 8003048:	a902      	add	r1, sp, #8
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	f000 f98e 	bl	800336c <_svfiprintf_r>
 8003050:	2200      	movs	r2, #0
 8003052:	9b02      	ldr	r3, [sp, #8]
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	b01c      	add	sp, #112	; 0x70
 8003058:	f85d eb04 	ldr.w	lr, [sp], #4
 800305c:	b003      	add	sp, #12
 800305e:	4770      	bx	lr
 8003060:	20000058 	.word	0x20000058
 8003064:	ffff0208 	.word	0xffff0208

08003068 <memset>:
 8003068:	4603      	mov	r3, r0
 800306a:	4402      	add	r2, r0
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	f803 1b01 	strb.w	r1, [r3], #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <__errno>:
 8003078:	4b01      	ldr	r3, [pc, #4]	; (8003080 <__errno+0x8>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000058 	.word	0x20000058

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	2600      	movs	r6, #0
 8003088:	4d0c      	ldr	r5, [pc, #48]	; (80030bc <__libc_init_array+0x38>)
 800308a:	4c0d      	ldr	r4, [pc, #52]	; (80030c0 <__libc_init_array+0x3c>)
 800308c:	1b64      	subs	r4, r4, r5
 800308e:	10a4      	asrs	r4, r4, #2
 8003090:	42a6      	cmp	r6, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	f000 fc7a 	bl	800398c <_init>
 8003098:	2600      	movs	r6, #0
 800309a:	4d0a      	ldr	r5, [pc, #40]	; (80030c4 <__libc_init_array+0x40>)
 800309c:	4c0a      	ldr	r4, [pc, #40]	; (80030c8 <__libc_init_array+0x44>)
 800309e:	1b64      	subs	r4, r4, r5
 80030a0:	10a4      	asrs	r4, r4, #2
 80030a2:	42a6      	cmp	r6, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ac:	4798      	blx	r3
 80030ae:	3601      	adds	r6, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	4798      	blx	r3
 80030b8:	3601      	adds	r6, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	08003a0c 	.word	0x08003a0c
 80030c0:	08003a0c 	.word	0x08003a0c
 80030c4:	08003a0c 	.word	0x08003a0c
 80030c8:	08003a10 	.word	0x08003a10

080030cc <__retarget_lock_acquire_recursive>:
 80030cc:	4770      	bx	lr

080030ce <__retarget_lock_release_recursive>:
 80030ce:	4770      	bx	lr

080030d0 <_free_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4605      	mov	r5, r0
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d040      	beq.n	800315a <_free_r+0x8a>
 80030d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030dc:	1f0c      	subs	r4, r1, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bfb8      	it	lt
 80030e2:	18e4      	addlt	r4, r4, r3
 80030e4:	f000 f8dc 	bl	80032a0 <__malloc_lock>
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <_free_r+0x8c>)
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	b933      	cbnz	r3, 80030fc <_free_r+0x2c>
 80030ee:	6063      	str	r3, [r4, #4]
 80030f0:	6014      	str	r4, [r2, #0]
 80030f2:	4628      	mov	r0, r5
 80030f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f8:	f000 b8d8 	b.w	80032ac <__malloc_unlock>
 80030fc:	42a3      	cmp	r3, r4
 80030fe:	d908      	bls.n	8003112 <_free_r+0x42>
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	1821      	adds	r1, r4, r0
 8003104:	428b      	cmp	r3, r1
 8003106:	bf01      	itttt	eq
 8003108:	6819      	ldreq	r1, [r3, #0]
 800310a:	685b      	ldreq	r3, [r3, #4]
 800310c:	1809      	addeq	r1, r1, r0
 800310e:	6021      	streq	r1, [r4, #0]
 8003110:	e7ed      	b.n	80030ee <_free_r+0x1e>
 8003112:	461a      	mov	r2, r3
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	b10b      	cbz	r3, 800311c <_free_r+0x4c>
 8003118:	42a3      	cmp	r3, r4
 800311a:	d9fa      	bls.n	8003112 <_free_r+0x42>
 800311c:	6811      	ldr	r1, [r2, #0]
 800311e:	1850      	adds	r0, r2, r1
 8003120:	42a0      	cmp	r0, r4
 8003122:	d10b      	bne.n	800313c <_free_r+0x6c>
 8003124:	6820      	ldr	r0, [r4, #0]
 8003126:	4401      	add	r1, r0
 8003128:	1850      	adds	r0, r2, r1
 800312a:	4283      	cmp	r3, r0
 800312c:	6011      	str	r1, [r2, #0]
 800312e:	d1e0      	bne.n	80030f2 <_free_r+0x22>
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4408      	add	r0, r1
 8003136:	6010      	str	r0, [r2, #0]
 8003138:	6053      	str	r3, [r2, #4]
 800313a:	e7da      	b.n	80030f2 <_free_r+0x22>
 800313c:	d902      	bls.n	8003144 <_free_r+0x74>
 800313e:	230c      	movs	r3, #12
 8003140:	602b      	str	r3, [r5, #0]
 8003142:	e7d6      	b.n	80030f2 <_free_r+0x22>
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	1821      	adds	r1, r4, r0
 8003148:	428b      	cmp	r3, r1
 800314a:	bf01      	itttt	eq
 800314c:	6819      	ldreq	r1, [r3, #0]
 800314e:	685b      	ldreq	r3, [r3, #4]
 8003150:	1809      	addeq	r1, r1, r0
 8003152:	6021      	streq	r1, [r4, #0]
 8003154:	6063      	str	r3, [r4, #4]
 8003156:	6054      	str	r4, [r2, #4]
 8003158:	e7cb      	b.n	80030f2 <_free_r+0x22>
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	20000338 	.word	0x20000338

08003160 <sbrk_aligned>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4e0e      	ldr	r6, [pc, #56]	; (800319c <sbrk_aligned+0x3c>)
 8003164:	460c      	mov	r4, r1
 8003166:	6831      	ldr	r1, [r6, #0]
 8003168:	4605      	mov	r5, r0
 800316a:	b911      	cbnz	r1, 8003172 <sbrk_aligned+0x12>
 800316c:	f000 fbaa 	bl	80038c4 <_sbrk_r>
 8003170:	6030      	str	r0, [r6, #0]
 8003172:	4621      	mov	r1, r4
 8003174:	4628      	mov	r0, r5
 8003176:	f000 fba5 	bl	80038c4 <_sbrk_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	d00a      	beq.n	8003194 <sbrk_aligned+0x34>
 800317e:	1cc4      	adds	r4, r0, #3
 8003180:	f024 0403 	bic.w	r4, r4, #3
 8003184:	42a0      	cmp	r0, r4
 8003186:	d007      	beq.n	8003198 <sbrk_aligned+0x38>
 8003188:	1a21      	subs	r1, r4, r0
 800318a:	4628      	mov	r0, r5
 800318c:	f000 fb9a 	bl	80038c4 <_sbrk_r>
 8003190:	3001      	adds	r0, #1
 8003192:	d101      	bne.n	8003198 <sbrk_aligned+0x38>
 8003194:	f04f 34ff 	mov.w	r4, #4294967295
 8003198:	4620      	mov	r0, r4
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	2000033c 	.word	0x2000033c

080031a0 <_malloc_r>:
 80031a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a4:	1ccd      	adds	r5, r1, #3
 80031a6:	f025 0503 	bic.w	r5, r5, #3
 80031aa:	3508      	adds	r5, #8
 80031ac:	2d0c      	cmp	r5, #12
 80031ae:	bf38      	it	cc
 80031b0:	250c      	movcc	r5, #12
 80031b2:	2d00      	cmp	r5, #0
 80031b4:	4607      	mov	r7, r0
 80031b6:	db01      	blt.n	80031bc <_malloc_r+0x1c>
 80031b8:	42a9      	cmp	r1, r5
 80031ba:	d905      	bls.n	80031c8 <_malloc_r+0x28>
 80031bc:	230c      	movs	r3, #12
 80031be:	2600      	movs	r6, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4630      	mov	r0, r6
 80031c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800329c <_malloc_r+0xfc>
 80031cc:	f000 f868 	bl	80032a0 <__malloc_lock>
 80031d0:	f8d8 3000 	ldr.w	r3, [r8]
 80031d4:	461c      	mov	r4, r3
 80031d6:	bb5c      	cbnz	r4, 8003230 <_malloc_r+0x90>
 80031d8:	4629      	mov	r1, r5
 80031da:	4638      	mov	r0, r7
 80031dc:	f7ff ffc0 	bl	8003160 <sbrk_aligned>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	4604      	mov	r4, r0
 80031e4:	d155      	bne.n	8003292 <_malloc_r+0xf2>
 80031e6:	f8d8 4000 	ldr.w	r4, [r8]
 80031ea:	4626      	mov	r6, r4
 80031ec:	2e00      	cmp	r6, #0
 80031ee:	d145      	bne.n	800327c <_malloc_r+0xdc>
 80031f0:	2c00      	cmp	r4, #0
 80031f2:	d048      	beq.n	8003286 <_malloc_r+0xe6>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	4631      	mov	r1, r6
 80031f8:	4638      	mov	r0, r7
 80031fa:	eb04 0903 	add.w	r9, r4, r3
 80031fe:	f000 fb61 	bl	80038c4 <_sbrk_r>
 8003202:	4581      	cmp	r9, r0
 8003204:	d13f      	bne.n	8003286 <_malloc_r+0xe6>
 8003206:	6821      	ldr	r1, [r4, #0]
 8003208:	4638      	mov	r0, r7
 800320a:	1a6d      	subs	r5, r5, r1
 800320c:	4629      	mov	r1, r5
 800320e:	f7ff ffa7 	bl	8003160 <sbrk_aligned>
 8003212:	3001      	adds	r0, #1
 8003214:	d037      	beq.n	8003286 <_malloc_r+0xe6>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	442b      	add	r3, r5
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	f8d8 3000 	ldr.w	r3, [r8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d038      	beq.n	8003296 <_malloc_r+0xf6>
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	42a2      	cmp	r2, r4
 8003228:	d12b      	bne.n	8003282 <_malloc_r+0xe2>
 800322a:	2200      	movs	r2, #0
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	e00f      	b.n	8003250 <_malloc_r+0xb0>
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	1b52      	subs	r2, r2, r5
 8003234:	d41f      	bmi.n	8003276 <_malloc_r+0xd6>
 8003236:	2a0b      	cmp	r2, #11
 8003238:	d917      	bls.n	800326a <_malloc_r+0xca>
 800323a:	1961      	adds	r1, r4, r5
 800323c:	42a3      	cmp	r3, r4
 800323e:	6025      	str	r5, [r4, #0]
 8003240:	bf18      	it	ne
 8003242:	6059      	strne	r1, [r3, #4]
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	bf08      	it	eq
 8003248:	f8c8 1000 	streq.w	r1, [r8]
 800324c:	5162      	str	r2, [r4, r5]
 800324e:	604b      	str	r3, [r1, #4]
 8003250:	4638      	mov	r0, r7
 8003252:	f104 060b 	add.w	r6, r4, #11
 8003256:	f000 f829 	bl	80032ac <__malloc_unlock>
 800325a:	f026 0607 	bic.w	r6, r6, #7
 800325e:	1d23      	adds	r3, r4, #4
 8003260:	1af2      	subs	r2, r6, r3
 8003262:	d0ae      	beq.n	80031c2 <_malloc_r+0x22>
 8003264:	1b9b      	subs	r3, r3, r6
 8003266:	50a3      	str	r3, [r4, r2]
 8003268:	e7ab      	b.n	80031c2 <_malloc_r+0x22>
 800326a:	42a3      	cmp	r3, r4
 800326c:	6862      	ldr	r2, [r4, #4]
 800326e:	d1dd      	bne.n	800322c <_malloc_r+0x8c>
 8003270:	f8c8 2000 	str.w	r2, [r8]
 8003274:	e7ec      	b.n	8003250 <_malloc_r+0xb0>
 8003276:	4623      	mov	r3, r4
 8003278:	6864      	ldr	r4, [r4, #4]
 800327a:	e7ac      	b.n	80031d6 <_malloc_r+0x36>
 800327c:	4634      	mov	r4, r6
 800327e:	6876      	ldr	r6, [r6, #4]
 8003280:	e7b4      	b.n	80031ec <_malloc_r+0x4c>
 8003282:	4613      	mov	r3, r2
 8003284:	e7cc      	b.n	8003220 <_malloc_r+0x80>
 8003286:	230c      	movs	r3, #12
 8003288:	4638      	mov	r0, r7
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	f000 f80e 	bl	80032ac <__malloc_unlock>
 8003290:	e797      	b.n	80031c2 <_malloc_r+0x22>
 8003292:	6025      	str	r5, [r4, #0]
 8003294:	e7dc      	b.n	8003250 <_malloc_r+0xb0>
 8003296:	605b      	str	r3, [r3, #4]
 8003298:	deff      	udf	#255	; 0xff
 800329a:	bf00      	nop
 800329c:	20000338 	.word	0x20000338

080032a0 <__malloc_lock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__malloc_lock+0x8>)
 80032a2:	f7ff bf13 	b.w	80030cc <__retarget_lock_acquire_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000334 	.word	0x20000334

080032ac <__malloc_unlock>:
 80032ac:	4801      	ldr	r0, [pc, #4]	; (80032b4 <__malloc_unlock+0x8>)
 80032ae:	f7ff bf0e 	b.w	80030ce <__retarget_lock_release_recursive>
 80032b2:	bf00      	nop
 80032b4:	20000334 	.word	0x20000334

080032b8 <__ssputs_r>:
 80032b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	461f      	mov	r7, r3
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	4682      	mov	sl, r0
 80032c2:	42be      	cmp	r6, r7
 80032c4:	460c      	mov	r4, r1
 80032c6:	4690      	mov	r8, r2
 80032c8:	680b      	ldr	r3, [r1, #0]
 80032ca:	d82c      	bhi.n	8003326 <__ssputs_r+0x6e>
 80032cc:	898a      	ldrh	r2, [r1, #12]
 80032ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032d2:	d026      	beq.n	8003322 <__ssputs_r+0x6a>
 80032d4:	6965      	ldr	r5, [r4, #20]
 80032d6:	6909      	ldr	r1, [r1, #16]
 80032d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032dc:	eba3 0901 	sub.w	r9, r3, r1
 80032e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e4:	1c7b      	adds	r3, r7, #1
 80032e6:	444b      	add	r3, r9
 80032e8:	106d      	asrs	r5, r5, #1
 80032ea:	429d      	cmp	r5, r3
 80032ec:	bf38      	it	cc
 80032ee:	461d      	movcc	r5, r3
 80032f0:	0553      	lsls	r3, r2, #21
 80032f2:	d527      	bpl.n	8003344 <__ssputs_r+0x8c>
 80032f4:	4629      	mov	r1, r5
 80032f6:	f7ff ff53 	bl	80031a0 <_malloc_r>
 80032fa:	4606      	mov	r6, r0
 80032fc:	b360      	cbz	r0, 8003358 <__ssputs_r+0xa0>
 80032fe:	464a      	mov	r2, r9
 8003300:	6921      	ldr	r1, [r4, #16]
 8003302:	f000 fafd 	bl	8003900 <memcpy>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	6126      	str	r6, [r4, #16]
 8003314:	444e      	add	r6, r9
 8003316:	6026      	str	r6, [r4, #0]
 8003318:	463e      	mov	r6, r7
 800331a:	6165      	str	r5, [r4, #20]
 800331c:	eba5 0509 	sub.w	r5, r5, r9
 8003320:	60a5      	str	r5, [r4, #8]
 8003322:	42be      	cmp	r6, r7
 8003324:	d900      	bls.n	8003328 <__ssputs_r+0x70>
 8003326:	463e      	mov	r6, r7
 8003328:	4632      	mov	r2, r6
 800332a:	4641      	mov	r1, r8
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	f000 faaf 	bl	8003890 <memmove>
 8003332:	2000      	movs	r0, #0
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	1b9b      	subs	r3, r3, r6
 8003338:	60a3      	str	r3, [r4, #8]
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	4433      	add	r3, r6
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003344:	462a      	mov	r2, r5
 8003346:	f000 fae9 	bl	800391c <_realloc_r>
 800334a:	4606      	mov	r6, r0
 800334c:	2800      	cmp	r0, #0
 800334e:	d1e0      	bne.n	8003312 <__ssputs_r+0x5a>
 8003350:	4650      	mov	r0, sl
 8003352:	6921      	ldr	r1, [r4, #16]
 8003354:	f7ff febc 	bl	80030d0 <_free_r>
 8003358:	230c      	movs	r3, #12
 800335a:	f8ca 3000 	str.w	r3, [sl]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003368:	81a3      	strh	r3, [r4, #12]
 800336a:	e7e9      	b.n	8003340 <__ssputs_r+0x88>

0800336c <_svfiprintf_r>:
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	4698      	mov	r8, r3
 8003372:	898b      	ldrh	r3, [r1, #12]
 8003374:	4607      	mov	r7, r0
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	460d      	mov	r5, r1
 800337a:	4614      	mov	r4, r2
 800337c:	b09d      	sub	sp, #116	; 0x74
 800337e:	d50e      	bpl.n	800339e <_svfiprintf_r+0x32>
 8003380:	690b      	ldr	r3, [r1, #16]
 8003382:	b963      	cbnz	r3, 800339e <_svfiprintf_r+0x32>
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	f7ff ff0b 	bl	80031a0 <_malloc_r>
 800338a:	6028      	str	r0, [r5, #0]
 800338c:	6128      	str	r0, [r5, #16]
 800338e:	b920      	cbnz	r0, 800339a <_svfiprintf_r+0x2e>
 8003390:	230c      	movs	r3, #12
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e0d0      	b.n	800353c <_svfiprintf_r+0x1d0>
 800339a:	2340      	movs	r3, #64	; 0x40
 800339c:	616b      	str	r3, [r5, #20]
 800339e:	2300      	movs	r3, #0
 80033a0:	9309      	str	r3, [sp, #36]	; 0x24
 80033a2:	2320      	movs	r3, #32
 80033a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a8:	2330      	movs	r3, #48	; 0x30
 80033aa:	f04f 0901 	mov.w	r9, #1
 80033ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80033b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003554 <_svfiprintf_r+0x1e8>
 80033b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033ba:	4623      	mov	r3, r4
 80033bc:	469a      	mov	sl, r3
 80033be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033c2:	b10a      	cbz	r2, 80033c8 <_svfiprintf_r+0x5c>
 80033c4:	2a25      	cmp	r2, #37	; 0x25
 80033c6:	d1f9      	bne.n	80033bc <_svfiprintf_r+0x50>
 80033c8:	ebba 0b04 	subs.w	fp, sl, r4
 80033cc:	d00b      	beq.n	80033e6 <_svfiprintf_r+0x7a>
 80033ce:	465b      	mov	r3, fp
 80033d0:	4622      	mov	r2, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7ff ff6f 	bl	80032b8 <__ssputs_r>
 80033da:	3001      	adds	r0, #1
 80033dc:	f000 80a9 	beq.w	8003532 <_svfiprintf_r+0x1c6>
 80033e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033e2:	445a      	add	r2, fp
 80033e4:	9209      	str	r2, [sp, #36]	; 0x24
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a1 	beq.w	8003532 <_svfiprintf_r+0x1c6>
 80033f0:	2300      	movs	r3, #0
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295
 80033f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033fa:	f10a 0a01 	add.w	sl, sl, #1
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	9307      	str	r3, [sp, #28]
 8003402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003406:	931a      	str	r3, [sp, #104]	; 0x68
 8003408:	4654      	mov	r4, sl
 800340a:	2205      	movs	r2, #5
 800340c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003410:	4850      	ldr	r0, [pc, #320]	; (8003554 <_svfiprintf_r+0x1e8>)
 8003412:	f000 fa67 	bl	80038e4 <memchr>
 8003416:	9a04      	ldr	r2, [sp, #16]
 8003418:	b9d8      	cbnz	r0, 8003452 <_svfiprintf_r+0xe6>
 800341a:	06d0      	lsls	r0, r2, #27
 800341c:	bf44      	itt	mi
 800341e:	2320      	movmi	r3, #32
 8003420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003424:	0711      	lsls	r1, r2, #28
 8003426:	bf44      	itt	mi
 8003428:	232b      	movmi	r3, #43	; 0x2b
 800342a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800342e:	f89a 3000 	ldrb.w	r3, [sl]
 8003432:	2b2a      	cmp	r3, #42	; 0x2a
 8003434:	d015      	beq.n	8003462 <_svfiprintf_r+0xf6>
 8003436:	4654      	mov	r4, sl
 8003438:	2000      	movs	r0, #0
 800343a:	f04f 0c0a 	mov.w	ip, #10
 800343e:	9a07      	ldr	r2, [sp, #28]
 8003440:	4621      	mov	r1, r4
 8003442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003446:	3b30      	subs	r3, #48	; 0x30
 8003448:	2b09      	cmp	r3, #9
 800344a:	d94d      	bls.n	80034e8 <_svfiprintf_r+0x17c>
 800344c:	b1b0      	cbz	r0, 800347c <_svfiprintf_r+0x110>
 800344e:	9207      	str	r2, [sp, #28]
 8003450:	e014      	b.n	800347c <_svfiprintf_r+0x110>
 8003452:	eba0 0308 	sub.w	r3, r0, r8
 8003456:	fa09 f303 	lsl.w	r3, r9, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	46a2      	mov	sl, r4
 800345e:	9304      	str	r3, [sp, #16]
 8003460:	e7d2      	b.n	8003408 <_svfiprintf_r+0x9c>
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	1d19      	adds	r1, r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	9103      	str	r1, [sp, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfbb      	ittet	lt
 800346e:	425b      	neglt	r3, r3
 8003470:	f042 0202 	orrlt.w	r2, r2, #2
 8003474:	9307      	strge	r3, [sp, #28]
 8003476:	9307      	strlt	r3, [sp, #28]
 8003478:	bfb8      	it	lt
 800347a:	9204      	strlt	r2, [sp, #16]
 800347c:	7823      	ldrb	r3, [r4, #0]
 800347e:	2b2e      	cmp	r3, #46	; 0x2e
 8003480:	d10c      	bne.n	800349c <_svfiprintf_r+0x130>
 8003482:	7863      	ldrb	r3, [r4, #1]
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d134      	bne.n	80034f2 <_svfiprintf_r+0x186>
 8003488:	9b03      	ldr	r3, [sp, #12]
 800348a:	3402      	adds	r4, #2
 800348c:	1d1a      	adds	r2, r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	9203      	str	r2, [sp, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfb8      	it	lt
 8003496:	f04f 33ff 	movlt.w	r3, #4294967295
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003558 <_svfiprintf_r+0x1ec>
 80034a0:	2203      	movs	r2, #3
 80034a2:	4650      	mov	r0, sl
 80034a4:	7821      	ldrb	r1, [r4, #0]
 80034a6:	f000 fa1d 	bl	80038e4 <memchr>
 80034aa:	b138      	cbz	r0, 80034bc <_svfiprintf_r+0x150>
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	9b04      	ldr	r3, [sp, #16]
 80034b0:	eba0 000a 	sub.w	r0, r0, sl
 80034b4:	4082      	lsls	r2, r0
 80034b6:	4313      	orrs	r3, r2
 80034b8:	3401      	adds	r4, #1
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c0:	2206      	movs	r2, #6
 80034c2:	4826      	ldr	r0, [pc, #152]	; (800355c <_svfiprintf_r+0x1f0>)
 80034c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c8:	f000 fa0c 	bl	80038e4 <memchr>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d038      	beq.n	8003542 <_svfiprintf_r+0x1d6>
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <_svfiprintf_r+0x1f4>)
 80034d2:	bb1b      	cbnz	r3, 800351c <_svfiprintf_r+0x1b0>
 80034d4:	9b03      	ldr	r3, [sp, #12]
 80034d6:	3307      	adds	r3, #7
 80034d8:	f023 0307 	bic.w	r3, r3, #7
 80034dc:	3308      	adds	r3, #8
 80034de:	9303      	str	r3, [sp, #12]
 80034e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e2:	4433      	add	r3, r6
 80034e4:	9309      	str	r3, [sp, #36]	; 0x24
 80034e6:	e768      	b.n	80033ba <_svfiprintf_r+0x4e>
 80034e8:	460c      	mov	r4, r1
 80034ea:	2001      	movs	r0, #1
 80034ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80034f0:	e7a6      	b.n	8003440 <_svfiprintf_r+0xd4>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f04f 0c0a 	mov.w	ip, #10
 80034f8:	4619      	mov	r1, r3
 80034fa:	3401      	adds	r4, #1
 80034fc:	9305      	str	r3, [sp, #20]
 80034fe:	4620      	mov	r0, r4
 8003500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003504:	3a30      	subs	r2, #48	; 0x30
 8003506:	2a09      	cmp	r2, #9
 8003508:	d903      	bls.n	8003512 <_svfiprintf_r+0x1a6>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0c6      	beq.n	800349c <_svfiprintf_r+0x130>
 800350e:	9105      	str	r1, [sp, #20]
 8003510:	e7c4      	b.n	800349c <_svfiprintf_r+0x130>
 8003512:	4604      	mov	r4, r0
 8003514:	2301      	movs	r3, #1
 8003516:	fb0c 2101 	mla	r1, ip, r1, r2
 800351a:	e7f0      	b.n	80034fe <_svfiprintf_r+0x192>
 800351c:	ab03      	add	r3, sp, #12
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	462a      	mov	r2, r5
 8003522:	4638      	mov	r0, r7
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <_svfiprintf_r+0x1f8>)
 8003526:	a904      	add	r1, sp, #16
 8003528:	f3af 8000 	nop.w
 800352c:	1c42      	adds	r2, r0, #1
 800352e:	4606      	mov	r6, r0
 8003530:	d1d6      	bne.n	80034e0 <_svfiprintf_r+0x174>
 8003532:	89ab      	ldrh	r3, [r5, #12]
 8003534:	065b      	lsls	r3, r3, #25
 8003536:	f53f af2d 	bmi.w	8003394 <_svfiprintf_r+0x28>
 800353a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800353c:	b01d      	add	sp, #116	; 0x74
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003542:	ab03      	add	r3, sp, #12
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	462a      	mov	r2, r5
 8003548:	4638      	mov	r0, r7
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_svfiprintf_r+0x1f8>)
 800354c:	a904      	add	r1, sp, #16
 800354e:	f000 f87d 	bl	800364c <_printf_i>
 8003552:	e7eb      	b.n	800352c <_svfiprintf_r+0x1c0>
 8003554:	080039d6 	.word	0x080039d6
 8003558:	080039dc 	.word	0x080039dc
 800355c:	080039e0 	.word	0x080039e0
 8003560:	00000000 	.word	0x00000000
 8003564:	080032b9 	.word	0x080032b9

08003568 <_printf_common>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	4616      	mov	r6, r2
 800356e:	4699      	mov	r9, r3
 8003570:	688a      	ldr	r2, [r1, #8]
 8003572:	690b      	ldr	r3, [r1, #16]
 8003574:	4607      	mov	r7, r0
 8003576:	4293      	cmp	r3, r2
 8003578:	bfb8      	it	lt
 800357a:	4613      	movlt	r3, r2
 800357c:	6033      	str	r3, [r6, #0]
 800357e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003582:	460c      	mov	r4, r1
 8003584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003588:	b10a      	cbz	r2, 800358e <_printf_common+0x26>
 800358a:	3301      	adds	r3, #1
 800358c:	6033      	str	r3, [r6, #0]
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	0699      	lsls	r1, r3, #26
 8003592:	bf42      	ittt	mi
 8003594:	6833      	ldrmi	r3, [r6, #0]
 8003596:	3302      	addmi	r3, #2
 8003598:	6033      	strmi	r3, [r6, #0]
 800359a:	6825      	ldr	r5, [r4, #0]
 800359c:	f015 0506 	ands.w	r5, r5, #6
 80035a0:	d106      	bne.n	80035b0 <_printf_common+0x48>
 80035a2:	f104 0a19 	add.w	sl, r4, #25
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	6832      	ldr	r2, [r6, #0]
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dc2b      	bgt.n	8003608 <_printf_common+0xa0>
 80035b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b4:	1e13      	subs	r3, r2, #0
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	bf18      	it	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	0692      	lsls	r2, r2, #26
 80035be:	d430      	bmi.n	8003622 <_printf_common+0xba>
 80035c0:	4649      	mov	r1, r9
 80035c2:	4638      	mov	r0, r7
 80035c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d023      	beq.n	8003616 <_printf_common+0xae>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	bf14      	ite	ne
 80035da:	2500      	movne	r5, #0
 80035dc:	6833      	ldreq	r3, [r6, #0]
 80035de:	f04f 0600 	mov.w	r6, #0
 80035e2:	bf08      	it	eq
 80035e4:	68e5      	ldreq	r5, [r4, #12]
 80035e6:	f104 041a 	add.w	r4, r4, #26
 80035ea:	bf08      	it	eq
 80035ec:	1aed      	subeq	r5, r5, r3
 80035ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035f2:	bf08      	it	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bfc4      	itt	gt
 80035fc:	1a9b      	subgt	r3, r3, r2
 80035fe:	18ed      	addgt	r5, r5, r3
 8003600:	42b5      	cmp	r5, r6
 8003602:	d11a      	bne.n	800363a <_printf_common+0xd2>
 8003604:	2000      	movs	r0, #0
 8003606:	e008      	b.n	800361a <_printf_common+0xb2>
 8003608:	2301      	movs	r3, #1
 800360a:	4652      	mov	r2, sl
 800360c:	4649      	mov	r1, r9
 800360e:	4638      	mov	r0, r7
 8003610:	47c0      	blx	r8
 8003612:	3001      	adds	r0, #1
 8003614:	d103      	bne.n	800361e <_printf_common+0xb6>
 8003616:	f04f 30ff 	mov.w	r0, #4294967295
 800361a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361e:	3501      	adds	r5, #1
 8003620:	e7c1      	b.n	80035a6 <_printf_common+0x3e>
 8003622:	2030      	movs	r0, #48	; 0x30
 8003624:	18e1      	adds	r1, r4, r3
 8003626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003630:	4422      	add	r2, r4
 8003632:	3302      	adds	r3, #2
 8003634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003638:	e7c2      	b.n	80035c0 <_printf_common+0x58>
 800363a:	2301      	movs	r3, #1
 800363c:	4622      	mov	r2, r4
 800363e:	4649      	mov	r1, r9
 8003640:	4638      	mov	r0, r7
 8003642:	47c0      	blx	r8
 8003644:	3001      	adds	r0, #1
 8003646:	d0e6      	beq.n	8003616 <_printf_common+0xae>
 8003648:	3601      	adds	r6, #1
 800364a:	e7d9      	b.n	8003600 <_printf_common+0x98>

0800364c <_printf_i>:
 800364c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	7e0f      	ldrb	r7, [r1, #24]
 8003652:	4691      	mov	r9, r2
 8003654:	2f78      	cmp	r7, #120	; 0x78
 8003656:	4680      	mov	r8, r0
 8003658:	460c      	mov	r4, r1
 800365a:	469a      	mov	sl, r3
 800365c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800365e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003662:	d807      	bhi.n	8003674 <_printf_i+0x28>
 8003664:	2f62      	cmp	r7, #98	; 0x62
 8003666:	d80a      	bhi.n	800367e <_printf_i+0x32>
 8003668:	2f00      	cmp	r7, #0
 800366a:	f000 80d5 	beq.w	8003818 <_printf_i+0x1cc>
 800366e:	2f58      	cmp	r7, #88	; 0x58
 8003670:	f000 80c1 	beq.w	80037f6 <_printf_i+0x1aa>
 8003674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800367c:	e03a      	b.n	80036f4 <_printf_i+0xa8>
 800367e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003682:	2b15      	cmp	r3, #21
 8003684:	d8f6      	bhi.n	8003674 <_printf_i+0x28>
 8003686:	a101      	add	r1, pc, #4	; (adr r1, 800368c <_printf_i+0x40>)
 8003688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800368c:	080036e5 	.word	0x080036e5
 8003690:	080036f9 	.word	0x080036f9
 8003694:	08003675 	.word	0x08003675
 8003698:	08003675 	.word	0x08003675
 800369c:	08003675 	.word	0x08003675
 80036a0:	08003675 	.word	0x08003675
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	08003675 	.word	0x08003675
 80036ac:	08003675 	.word	0x08003675
 80036b0:	08003675 	.word	0x08003675
 80036b4:	08003675 	.word	0x08003675
 80036b8:	080037ff 	.word	0x080037ff
 80036bc:	08003725 	.word	0x08003725
 80036c0:	080037b9 	.word	0x080037b9
 80036c4:	08003675 	.word	0x08003675
 80036c8:	08003675 	.word	0x08003675
 80036cc:	08003821 	.word	0x08003821
 80036d0:	08003675 	.word	0x08003675
 80036d4:	08003725 	.word	0x08003725
 80036d8:	08003675 	.word	0x08003675
 80036dc:	08003675 	.word	0x08003675
 80036e0:	080037c1 	.word	0x080037c1
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	602a      	str	r2, [r5, #0]
 80036ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0a0      	b.n	800383a <_printf_i+0x1ee>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	0607      	lsls	r7, r0, #24
 80036fe:	f103 0104 	add.w	r1, r3, #4
 8003702:	6029      	str	r1, [r5, #0]
 8003704:	d501      	bpl.n	800370a <_printf_i+0xbe>
 8003706:	681e      	ldr	r6, [r3, #0]
 8003708:	e003      	b.n	8003712 <_printf_i+0xc6>
 800370a:	0646      	lsls	r6, r0, #25
 800370c:	d5fb      	bpl.n	8003706 <_printf_i+0xba>
 800370e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003712:	2e00      	cmp	r6, #0
 8003714:	da03      	bge.n	800371e <_printf_i+0xd2>
 8003716:	232d      	movs	r3, #45	; 0x2d
 8003718:	4276      	negs	r6, r6
 800371a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800371e:	230a      	movs	r3, #10
 8003720:	4859      	ldr	r0, [pc, #356]	; (8003888 <_printf_i+0x23c>)
 8003722:	e012      	b.n	800374a <_printf_i+0xfe>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	1d19      	adds	r1, r3, #4
 800372a:	6029      	str	r1, [r5, #0]
 800372c:	0605      	lsls	r5, r0, #24
 800372e:	d501      	bpl.n	8003734 <_printf_i+0xe8>
 8003730:	681e      	ldr	r6, [r3, #0]
 8003732:	e002      	b.n	800373a <_printf_i+0xee>
 8003734:	0641      	lsls	r1, r0, #25
 8003736:	d5fb      	bpl.n	8003730 <_printf_i+0xe4>
 8003738:	881e      	ldrh	r6, [r3, #0]
 800373a:	2f6f      	cmp	r7, #111	; 0x6f
 800373c:	bf0c      	ite	eq
 800373e:	2308      	moveq	r3, #8
 8003740:	230a      	movne	r3, #10
 8003742:	4851      	ldr	r0, [pc, #324]	; (8003888 <_printf_i+0x23c>)
 8003744:	2100      	movs	r1, #0
 8003746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800374a:	6865      	ldr	r5, [r4, #4]
 800374c:	2d00      	cmp	r5, #0
 800374e:	bfa8      	it	ge
 8003750:	6821      	ldrge	r1, [r4, #0]
 8003752:	60a5      	str	r5, [r4, #8]
 8003754:	bfa4      	itt	ge
 8003756:	f021 0104 	bicge.w	r1, r1, #4
 800375a:	6021      	strge	r1, [r4, #0]
 800375c:	b90e      	cbnz	r6, 8003762 <_printf_i+0x116>
 800375e:	2d00      	cmp	r5, #0
 8003760:	d04b      	beq.n	80037fa <_printf_i+0x1ae>
 8003762:	4615      	mov	r5, r2
 8003764:	fbb6 f1f3 	udiv	r1, r6, r3
 8003768:	fb03 6711 	mls	r7, r3, r1, r6
 800376c:	5dc7      	ldrb	r7, [r0, r7]
 800376e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003772:	4637      	mov	r7, r6
 8003774:	42bb      	cmp	r3, r7
 8003776:	460e      	mov	r6, r1
 8003778:	d9f4      	bls.n	8003764 <_printf_i+0x118>
 800377a:	2b08      	cmp	r3, #8
 800377c:	d10b      	bne.n	8003796 <_printf_i+0x14a>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	07de      	lsls	r6, r3, #31
 8003782:	d508      	bpl.n	8003796 <_printf_i+0x14a>
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	6861      	ldr	r1, [r4, #4]
 8003788:	4299      	cmp	r1, r3
 800378a:	bfde      	ittt	le
 800378c:	2330      	movle	r3, #48	; 0x30
 800378e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003796:	1b52      	subs	r2, r2, r5
 8003798:	6122      	str	r2, [r4, #16]
 800379a:	464b      	mov	r3, r9
 800379c:	4621      	mov	r1, r4
 800379e:	4640      	mov	r0, r8
 80037a0:	f8cd a000 	str.w	sl, [sp]
 80037a4:	aa03      	add	r2, sp, #12
 80037a6:	f7ff fedf 	bl	8003568 <_printf_common>
 80037aa:	3001      	adds	r0, #1
 80037ac:	d14a      	bne.n	8003844 <_printf_i+0x1f8>
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295
 80037b2:	b004      	add	sp, #16
 80037b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	f043 0320 	orr.w	r3, r3, #32
 80037be:	6023      	str	r3, [r4, #0]
 80037c0:	2778      	movs	r7, #120	; 0x78
 80037c2:	4832      	ldr	r0, [pc, #200]	; (800388c <_printf_i+0x240>)
 80037c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	6829      	ldr	r1, [r5, #0]
 80037cc:	061f      	lsls	r7, r3, #24
 80037ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80037d2:	d402      	bmi.n	80037da <_printf_i+0x18e>
 80037d4:	065f      	lsls	r7, r3, #25
 80037d6:	bf48      	it	mi
 80037d8:	b2b6      	uxthmi	r6, r6
 80037da:	07df      	lsls	r7, r3, #31
 80037dc:	bf48      	it	mi
 80037de:	f043 0320 	orrmi.w	r3, r3, #32
 80037e2:	6029      	str	r1, [r5, #0]
 80037e4:	bf48      	it	mi
 80037e6:	6023      	strmi	r3, [r4, #0]
 80037e8:	b91e      	cbnz	r6, 80037f2 <_printf_i+0x1a6>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f023 0320 	bic.w	r3, r3, #32
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	2310      	movs	r3, #16
 80037f4:	e7a6      	b.n	8003744 <_printf_i+0xf8>
 80037f6:	4824      	ldr	r0, [pc, #144]	; (8003888 <_printf_i+0x23c>)
 80037f8:	e7e4      	b.n	80037c4 <_printf_i+0x178>
 80037fa:	4615      	mov	r5, r2
 80037fc:	e7bd      	b.n	800377a <_printf_i+0x12e>
 80037fe:	682b      	ldr	r3, [r5, #0]
 8003800:	6826      	ldr	r6, [r4, #0]
 8003802:	1d18      	adds	r0, r3, #4
 8003804:	6961      	ldr	r1, [r4, #20]
 8003806:	6028      	str	r0, [r5, #0]
 8003808:	0635      	lsls	r5, r6, #24
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	d501      	bpl.n	8003812 <_printf_i+0x1c6>
 800380e:	6019      	str	r1, [r3, #0]
 8003810:	e002      	b.n	8003818 <_printf_i+0x1cc>
 8003812:	0670      	lsls	r0, r6, #25
 8003814:	d5fb      	bpl.n	800380e <_printf_i+0x1c2>
 8003816:	8019      	strh	r1, [r3, #0]
 8003818:	2300      	movs	r3, #0
 800381a:	4615      	mov	r5, r2
 800381c:	6123      	str	r3, [r4, #16]
 800381e:	e7bc      	b.n	800379a <_printf_i+0x14e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	602a      	str	r2, [r5, #0]
 8003828:	681d      	ldr	r5, [r3, #0]
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f859 	bl	80038e4 <memchr>
 8003832:	b108      	cbz	r0, 8003838 <_printf_i+0x1ec>
 8003834:	1b40      	subs	r0, r0, r5
 8003836:	6060      	str	r0, [r4, #4]
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2300      	movs	r3, #0
 800383e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003842:	e7aa      	b.n	800379a <_printf_i+0x14e>
 8003844:	462a      	mov	r2, r5
 8003846:	4649      	mov	r1, r9
 8003848:	4640      	mov	r0, r8
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	47d0      	blx	sl
 800384e:	3001      	adds	r0, #1
 8003850:	d0ad      	beq.n	80037ae <_printf_i+0x162>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	079b      	lsls	r3, r3, #30
 8003856:	d413      	bmi.n	8003880 <_printf_i+0x234>
 8003858:	68e0      	ldr	r0, [r4, #12]
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	4298      	cmp	r0, r3
 800385e:	bfb8      	it	lt
 8003860:	4618      	movlt	r0, r3
 8003862:	e7a6      	b.n	80037b2 <_printf_i+0x166>
 8003864:	2301      	movs	r3, #1
 8003866:	4632      	mov	r2, r6
 8003868:	4649      	mov	r1, r9
 800386a:	4640      	mov	r0, r8
 800386c:	47d0      	blx	sl
 800386e:	3001      	adds	r0, #1
 8003870:	d09d      	beq.n	80037ae <_printf_i+0x162>
 8003872:	3501      	adds	r5, #1
 8003874:	68e3      	ldr	r3, [r4, #12]
 8003876:	9903      	ldr	r1, [sp, #12]
 8003878:	1a5b      	subs	r3, r3, r1
 800387a:	42ab      	cmp	r3, r5
 800387c:	dcf2      	bgt.n	8003864 <_printf_i+0x218>
 800387e:	e7eb      	b.n	8003858 <_printf_i+0x20c>
 8003880:	2500      	movs	r5, #0
 8003882:	f104 0619 	add.w	r6, r4, #25
 8003886:	e7f5      	b.n	8003874 <_printf_i+0x228>
 8003888:	080039e7 	.word	0x080039e7
 800388c:	080039f8 	.word	0x080039f8

08003890 <memmove>:
 8003890:	4288      	cmp	r0, r1
 8003892:	b510      	push	{r4, lr}
 8003894:	eb01 0402 	add.w	r4, r1, r2
 8003898:	d902      	bls.n	80038a0 <memmove+0x10>
 800389a:	4284      	cmp	r4, r0
 800389c:	4623      	mov	r3, r4
 800389e:	d807      	bhi.n	80038b0 <memmove+0x20>
 80038a0:	1e43      	subs	r3, r0, #1
 80038a2:	42a1      	cmp	r1, r4
 80038a4:	d008      	beq.n	80038b8 <memmove+0x28>
 80038a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ae:	e7f8      	b.n	80038a2 <memmove+0x12>
 80038b0:	4601      	mov	r1, r0
 80038b2:	4402      	add	r2, r0
 80038b4:	428a      	cmp	r2, r1
 80038b6:	d100      	bne.n	80038ba <memmove+0x2a>
 80038b8:	bd10      	pop	{r4, pc}
 80038ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038c2:	e7f7      	b.n	80038b4 <memmove+0x24>

080038c4 <_sbrk_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	2300      	movs	r3, #0
 80038c8:	4d05      	ldr	r5, [pc, #20]	; (80038e0 <_sbrk_r+0x1c>)
 80038ca:	4604      	mov	r4, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	602b      	str	r3, [r5, #0]
 80038d0:	f7fd f95c 	bl	8000b8c <_sbrk>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_sbrk_r+0x1a>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_sbrk_r+0x1a>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	20000330 	.word	0x20000330

080038e4 <memchr>:
 80038e4:	4603      	mov	r3, r0
 80038e6:	b510      	push	{r4, lr}
 80038e8:	b2c9      	uxtb	r1, r1
 80038ea:	4402      	add	r2, r0
 80038ec:	4293      	cmp	r3, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	d101      	bne.n	80038f6 <memchr+0x12>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e003      	b.n	80038fe <memchr+0x1a>
 80038f6:	7804      	ldrb	r4, [r0, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	428c      	cmp	r4, r1
 80038fc:	d1f6      	bne.n	80038ec <memchr+0x8>
 80038fe:	bd10      	pop	{r4, pc}

08003900 <memcpy>:
 8003900:	440a      	add	r2, r1
 8003902:	4291      	cmp	r1, r2
 8003904:	f100 33ff 	add.w	r3, r0, #4294967295
 8003908:	d100      	bne.n	800390c <memcpy+0xc>
 800390a:	4770      	bx	lr
 800390c:	b510      	push	{r4, lr}
 800390e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003912:	4291      	cmp	r1, r2
 8003914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003918:	d1f9      	bne.n	800390e <memcpy+0xe>
 800391a:	bd10      	pop	{r4, pc}

0800391c <_realloc_r>:
 800391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003920:	4680      	mov	r8, r0
 8003922:	4614      	mov	r4, r2
 8003924:	460e      	mov	r6, r1
 8003926:	b921      	cbnz	r1, 8003932 <_realloc_r+0x16>
 8003928:	4611      	mov	r1, r2
 800392a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800392e:	f7ff bc37 	b.w	80031a0 <_malloc_r>
 8003932:	b92a      	cbnz	r2, 8003940 <_realloc_r+0x24>
 8003934:	f7ff fbcc 	bl	80030d0 <_free_r>
 8003938:	4625      	mov	r5, r4
 800393a:	4628      	mov	r0, r5
 800393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003940:	f000 f81b 	bl	800397a <_malloc_usable_size_r>
 8003944:	4284      	cmp	r4, r0
 8003946:	4607      	mov	r7, r0
 8003948:	d802      	bhi.n	8003950 <_realloc_r+0x34>
 800394a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800394e:	d812      	bhi.n	8003976 <_realloc_r+0x5a>
 8003950:	4621      	mov	r1, r4
 8003952:	4640      	mov	r0, r8
 8003954:	f7ff fc24 	bl	80031a0 <_malloc_r>
 8003958:	4605      	mov	r5, r0
 800395a:	2800      	cmp	r0, #0
 800395c:	d0ed      	beq.n	800393a <_realloc_r+0x1e>
 800395e:	42bc      	cmp	r4, r7
 8003960:	4622      	mov	r2, r4
 8003962:	4631      	mov	r1, r6
 8003964:	bf28      	it	cs
 8003966:	463a      	movcs	r2, r7
 8003968:	f7ff ffca 	bl	8003900 <memcpy>
 800396c:	4631      	mov	r1, r6
 800396e:	4640      	mov	r0, r8
 8003970:	f7ff fbae 	bl	80030d0 <_free_r>
 8003974:	e7e1      	b.n	800393a <_realloc_r+0x1e>
 8003976:	4635      	mov	r5, r6
 8003978:	e7df      	b.n	800393a <_realloc_r+0x1e>

0800397a <_malloc_usable_size_r>:
 800397a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800397e:	1f18      	subs	r0, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	bfbc      	itt	lt
 8003984:	580b      	ldrlt	r3, [r1, r0]
 8003986:	18c0      	addlt	r0, r0, r3
 8003988:	4770      	bx	lr
	...

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
