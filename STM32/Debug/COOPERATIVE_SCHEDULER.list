
COOPERATIVE_SCHEDULER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003780  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080038f4  080038f4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f4  080038f4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080038fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08003958  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08003958  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be65  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d53  00000000  00000000  0002bf2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a3  00000000  00000000  0002e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178ea  00000000  00000000  0002f273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e016  00000000  00000000  00046b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008814f  00000000  00000000  00054b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003864  00000000  00000000  000dccc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e0528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003874 	.word	0x08003874

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003874 	.word	0x08003874

0800014c <timePrint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timePrint(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af00      	add	r7, sp, #0
	char str[100];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "%lu\r\n", HAL_GetTick()), 100);
 8000152:	f000 fd63 	bl	8000c1c <HAL_GetTick>
 8000156:	4602      	mov	r2, r0
 8000158:	1d3b      	adds	r3, r7, #4
 800015a:	4907      	ldr	r1, [pc, #28]	; (8000178 <timePrint+0x2c>)
 800015c:	4618      	mov	r0, r3
 800015e:	f002 fed7 	bl	8002f10 <siprintf>
 8000162:	4603      	mov	r3, r0
 8000164:	b29a      	uxth	r2, r3
 8000166:	1d39      	adds	r1, r7, #4
 8000168:	2364      	movs	r3, #100	; 0x64
 800016a:	4804      	ldr	r0, [pc, #16]	; (800017c <timePrint+0x30>)
 800016c:	f002 f8fc 	bl	8002368 <HAL_UART_Transmit>
}
 8000170:	bf00      	nop
 8000172:	3768      	adds	r7, #104	; 0x68
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	0800388c 	.word	0x0800388c
 800017c:	20000108 	.word	0x20000108

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000184:	f000 fcf2 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000188:	f000 f81e 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018c:	f000 f91c 	bl	80003c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000190:	f000 f856 	bl	8000240 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000194:	f000 f8ee 	bl	8000374 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000198:	f000 f89e 	bl	80002d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800019c:	4807      	ldr	r0, [pc, #28]	; (80001bc <main+0x3c>)
 800019e:	f001 fcfb 	bl	8001b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001a2:	4807      	ldr	r0, [pc, #28]	; (80001c0 <main+0x40>)
 80001a4:	f001 fcf8 	bl	8001b98 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80001a8:	f000 f956 	bl	8000458 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(timePrint, 0, 11);
 80001ac:	220b      	movs	r2, #11
 80001ae:	2100      	movs	r1, #0
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <main+0x44>)
 80001b2:	f000 f9ef 	bl	8000594 <SCH_AddTask>
  while (1)
  {
	  SCH_Dispatch();
 80001b6:	f000 f9bf 	bl	8000538 <SCH_Dispatch>
 80001ba:	e7fc      	b.n	80001b6 <main+0x36>
 80001bc:	20000078 	.word	0x20000078
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	0800014d 	.word	0x0800014d

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 feba 	bl	8002f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f6:	2300      	movs	r3, #0
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 f86a 	bl	80012d8 <HAL_RCC_OscConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800020a:	f000 f920 	bl	800044e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020e:	230f      	movs	r3, #15
 8000210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fad8 	bl	80017dc <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000232:	f000 f90c 	bl	800044e <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_TIM2_Init+0x94>)
 800025e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <MX_TIM2_Init+0x94>)
 8000266:	2201      	movs	r2, #1
 8000268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <MX_TIM2_Init+0x94>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_TIM2_Init+0x94>)
 8000272:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <MX_TIM2_Init+0x94>)
 800027a:	2200      	movs	r2, #0
 800027c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_TIM2_Init+0x94>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000284:	4813      	ldr	r0, [pc, #76]	; (80002d4 <MX_TIM2_Init+0x94>)
 8000286:	f001 fc37 	bl	8001af8 <HAL_TIM_Base_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000290:	f000 f8dd 	bl	800044e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800029a:	f107 0308 	add.w	r3, r7, #8
 800029e:	4619      	mov	r1, r3
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <MX_TIM2_Init+0x94>)
 80002a2:	f001 fdcd 	bl	8001e40 <HAL_TIM_ConfigClockSource>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002ac:	f000 f8cf 	bl	800044e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b0:	2300      	movs	r3, #0
 80002b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4619      	mov	r1, r3
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_TIM2_Init+0x94>)
 80002be:	f001 ff99 	bl	80021f4 <HAL_TIMEx_MasterConfigSynchronization>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002c8:	f000 f8c1 	bl	800044e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000078 	.word	0x20000078

080002d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002f4:	4b1d      	ldr	r3, [pc, #116]	; (800036c <MX_TIM3_Init+0x94>)
 80002f6:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <MX_TIM3_Init+0x98>)
 80002f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <MX_TIM3_Init+0x94>)
 80002fc:	223f      	movs	r2, #63	; 0x3f
 80002fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_TIM3_Init+0x94>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_TIM3_Init+0x94>)
 8000308:	f24f 4223 	movw	r2, #62499	; 0xf423
 800030c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_TIM3_Init+0x94>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_TIM3_Init+0x94>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <MX_TIM3_Init+0x94>)
 800031c:	f001 fbec 	bl	8001af8 <HAL_TIM_Base_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000326:	f000 f892 	bl	800044e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	4619      	mov	r1, r3
 8000336:	480d      	ldr	r0, [pc, #52]	; (800036c <MX_TIM3_Init+0x94>)
 8000338:	f001 fd82 	bl	8001e40 <HAL_TIM_ConfigClockSource>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f884 	bl	800044e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	4619      	mov	r1, r3
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <MX_TIM3_Init+0x94>)
 8000354:	f001 ff4e 	bl	80021f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800035e:	f000 f876 	bl	800044e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000c0 	.word	0x200000c0
 8000370:	40000400 	.word	0x40000400

08000374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <MX_USART2_UART_Init+0x50>)
 800037c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 8000380:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_USART2_UART_Init+0x4c>)
 80003ac:	f001 ff8c 	bl	80022c8 <HAL_UART_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003b6:	f000 f84a 	bl	800044e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000108 	.word	0x20000108
 80003c4:	40004400 	.word	0x40004400

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_GPIO_Init+0x60>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <MX_GPIO_Init+0x60>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_GPIO_Init+0x60>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_AQUA_Pin
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_GPIO_Init+0x64>)
 80003fc:	f000 ff54 	bl	80012a8 <HAL_GPIO_WritePin>
                          |LED_BLUE_Pin|LED_PINK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_AQUA_Pin
                           LED_BLUE_Pin LED_PINK_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_AQUA_Pin
 8000400:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000404:	60bb      	str	r3, [r7, #8]
                          |LED_BLUE_Pin|LED_PINK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040a:	2301      	movs	r3, #1
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0x64>)
 800041a:	f000 fdc9 	bl	8000fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40010800 	.word	0x40010800

08000430 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8000442:	f000 f853 	bl	80004ec <SCH_Update>
	}
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000452:	b672      	cpsid	i
}
 8000454:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000456:	e7fe      	b.n	8000456 <Error_Handler+0x8>

08000458 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800045e:	2300      	movs	r3, #0
 8000460:	71fb      	strb	r3, [r7, #7]
 8000462:	e037      	b.n	80004d4 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	4920      	ldr	r1, [pc, #128]	; (80004e8 <SCH_Init+0x90>)
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	440b      	add	r3, r1
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	f1c3 0307 	rsb	r3, r3, #7
 800047e:	b2d8      	uxtb	r0, r3
 8000480:	4919      	ldr	r1, [pc, #100]	; (80004e8 <SCH_Init+0x90>)
 8000482:	4613      	mov	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	440b      	add	r3, r1
 800048c:	3304      	adds	r3, #4
 800048e:	4602      	mov	r2, r0
 8000490:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	4914      	ldr	r1, [pc, #80]	; (80004e8 <SCH_Init+0x90>)
 8000496:	4613      	mov	r3, r2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	4413      	add	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	440b      	add	r3, r1
 80004a0:	3308      	adds	r3, #8
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	490f      	ldr	r1, [pc, #60]	; (80004e8 <SCH_Init+0x90>)
 80004aa:	4613      	mov	r3, r2
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	4413      	add	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	440b      	add	r3, r1
 80004b4:	330c      	adds	r3, #12
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 80004ba:	79fa      	ldrb	r2, [r7, #7]
 80004bc:	490a      	ldr	r1, [pc, #40]	; (80004e8 <SCH_Init+0x90>)
 80004be:	4613      	mov	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	440b      	add	r3, r1
 80004c8:	3310      	adds	r3, #16
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	3301      	adds	r3, #1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b07      	cmp	r3, #7
 80004d8:	d9c4      	bls.n	8000464 <SCH_Init+0xc>
    }
}
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000150 	.word	0x20000150

080004ec <SCH_Update>:

void SCH_Update(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <SCH_Update+0x48>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d018      	beq.n	800052a <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <SCH_Update+0x48>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00c      	beq.n	800051a <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <SCH_Update+0x48>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	2b0a      	cmp	r3, #10
 8000506:	d905      	bls.n	8000514 <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <SCH_Update+0x48>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	3b0a      	subs	r3, #10
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <SCH_Update+0x48>)
 8000510:	6093      	str	r3, [r2, #8]
 8000512:	e002      	b.n	800051a <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <SCH_Update+0x48>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <SCH_Update+0x48>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d104      	bne.n	800052c <SCH_Update+0x40>
		tasks[0].flag = 1;
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <SCH_Update+0x48>)
 8000524:	2201      	movs	r2, #1
 8000526:	741a      	strb	r2, [r3, #16]
 8000528:	e000      	b.n	800052c <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 800052a:	bf00      	nop
	}
}
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000150 	.word	0x20000150

08000538 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
	if (tasks[0].functionPointer == 0) return;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <SCH_Dispatch+0x58>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d01f      	beq.n	8000586 <SCH_Dispatch+0x4e>
    if (tasks[0].flag == 1) {
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <SCH_Dispatch+0x58>)
 8000548:	7c1b      	ldrb	r3, [r3, #16]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d11c      	bne.n	8000588 <SCH_Dispatch+0x50>
        (*tasks[0].functionPointer)();
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <SCH_Dispatch+0x58>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4798      	blx	r3
        tasks[0].flag = 0;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <SCH_Dispatch+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	741a      	strb	r2, [r3, #16]
        SCH_Task newTask = tasks[0];
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <SCH_Dispatch+0x58>)
 800055c:	1d3c      	adds	r4, r7, #4
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	682b      	ldr	r3, [r5, #0]
 8000566:	6023      	str	r3, [r4, #0]
        SCH_DeleteTask(tasks[0].id);
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <SCH_Dispatch+0x58>)
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f917 	bl	80007a0 <SCH_DeleteTask>
        if (newTask.period > 0) {
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d007      	beq.n	8000588 <SCH_Dispatch+0x50>
            SCH_AddTask(newTask.functionPointer, newTask.period, newTask.period);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6939      	ldr	r1, [r7, #16]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f808 	bl	8000594 <SCH_AddTask>
 8000584:	e000      	b.n	8000588 <SCH_Dispatch+0x50>
	if (tasks[0].functionPointer == 0) return;
 8000586:	bf00      	nop
        }
    }
}
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bdb0      	pop	{r4, r5, r7, pc}
 800058e:	bf00      	nop
 8000590:	20000150 	.word	0x20000150

08000594 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8000594:	b4b0      	push	{r4, r5, r7}
 8000596:	b089      	sub	sp, #36	; 0x24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 80005a0:	4b7e      	ldr	r3, [pc, #504]	; (800079c <SCH_AddTask+0x208>)
 80005a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SCH_AddTask+0x1a>
 80005aa:	2308      	movs	r3, #8
 80005ac:	e0f1      	b.n	8000792 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 80005ae:	4b7b      	ldr	r3, [pc, #492]	; (800079c <SCH_AddTask+0x208>)
 80005b0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80005b4:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	76fb      	strb	r3, [r7, #27]
 80005be:	e0e3      	b.n	8000788 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 80005c0:	7efa      	ldrb	r2, [r7, #27]
 80005c2:	4976      	ldr	r1, [pc, #472]	; (800079c <SCH_AddTask+0x208>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	3308      	adds	r3, #8
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	69fa      	ldr	r2, [r7, #28]
 80005d4:	4413      	add	r3, r2
 80005d6:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 80005d8:	69fa      	ldr	r2, [r7, #28]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d80a      	bhi.n	80005f6 <SCH_AddTask+0x62>
 80005e0:	7efa      	ldrb	r2, [r7, #27]
 80005e2:	496e      	ldr	r1, [pc, #440]	; (800079c <SCH_AddTask+0x208>)
 80005e4:	4613      	mov	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4413      	add	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f040 80c6 	bne.w	8000782 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 80005f6:	2307      	movs	r3, #7
 80005f8:	76bb      	strb	r3, [r7, #26]
 80005fa:	e017      	b.n	800062c <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 80005fc:	7ebb      	ldrb	r3, [r7, #26]
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	7eb9      	ldrb	r1, [r7, #26]
 8000602:	4866      	ldr	r0, [pc, #408]	; (800079c <SCH_AddTask+0x208>)
 8000604:	460b      	mov	r3, r1
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	440b      	add	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4418      	add	r0, r3
 800060e:	4963      	ldr	r1, [pc, #396]	; (800079c <SCH_AddTask+0x208>)
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	4604      	mov	r4, r0
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000626:	7ebb      	ldrb	r3, [r7, #26]
 8000628:	3b01      	subs	r3, #1
 800062a:	76bb      	strb	r3, [r7, #26]
 800062c:	7eba      	ldrb	r2, [r7, #26]
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8e3      	bhi.n	80005fc <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8000634:	7efa      	ldrb	r2, [r7, #27]
 8000636:	4959      	ldr	r1, [pc, #356]	; (800079c <SCH_AddTask+0x208>)
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8000646:	7efa      	ldrb	r2, [r7, #27]
 8000648:	4954      	ldr	r1, [pc, #336]	; (800079c <SCH_AddTask+0x208>)
 800064a:	4613      	mov	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	440b      	add	r3, r1
 8000654:	3304      	adds	r3, #4
 8000656:	7e7a      	ldrb	r2, [r7, #25]
 8000658:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 800065a:	7efa      	ldrb	r2, [r7, #27]
 800065c:	494f      	ldr	r1, [pc, #316]	; (800079c <SCH_AddTask+0x208>)
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	330c      	adds	r3, #12
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 800066e:	7efa      	ldrb	r2, [r7, #27]
 8000670:	494a      	ldr	r1, [pc, #296]	; (800079c <SCH_AddTask+0x208>)
 8000672:	4613      	mov	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	440b      	add	r3, r1
 800067c:	3310      	adds	r3, #16
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000682:	69fa      	ldr	r2, [r7, #28]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	429a      	cmp	r2, r3
 8000688:	d950      	bls.n	800072c <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 800068a:	69fa      	ldr	r2, [r7, #28]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000692:	7efb      	ldrb	r3, [r7, #27]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	4941      	ldr	r1, [pc, #260]	; (800079c <SCH_AddTask+0x208>)
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	3308      	adds	r3, #8
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	7efa      	ldrb	r2, [r7, #27]
 80006aa:	1ac9      	subs	r1, r1, r3
 80006ac:	483b      	ldr	r0, [pc, #236]	; (800079c <SCH_AddTask+0x208>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4403      	add	r3, r0
 80006b8:	3308      	adds	r3, #8
 80006ba:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80006bc:	7efa      	ldrb	r2, [r7, #27]
 80006be:	4937      	ldr	r1, [pc, #220]	; (800079c <SCH_AddTask+0x208>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3308      	adds	r3, #8
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d109      	bne.n	80006e6 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 80006d2:	7efa      	ldrb	r2, [r7, #27]
 80006d4:	4931      	ldr	r1, [pc, #196]	; (800079c <SCH_AddTask+0x208>)
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	440b      	add	r3, r1
 80006e0:	3310      	adds	r3, #16
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 80006e6:	7efb      	ldrb	r3, [r7, #27]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	6979      	ldr	r1, [r7, #20]
 80006ec:	482b      	ldr	r0, [pc, #172]	; (800079c <SCH_AddTask+0x208>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4403      	add	r3, r0
 80006f8:	3308      	adds	r3, #8
 80006fa:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 80006fc:	7efb      	ldrb	r3, [r7, #27]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	4926      	ldr	r1, [pc, #152]	; (800079c <SCH_AddTask+0x208>)
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	440b      	add	r3, r1
 800070c:	3308      	adds	r3, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d12c      	bne.n	800076e <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8000714:	7efb      	ldrb	r3, [r7, #27]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	4920      	ldr	r1, [pc, #128]	; (800079c <SCH_AddTask+0x208>)
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	3310      	adds	r3, #16
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e020      	b.n	800076e <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 800072c:	7efa      	ldrb	r2, [r7, #27]
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	1ac9      	subs	r1, r1, r3
 8000734:	4819      	ldr	r0, [pc, #100]	; (800079c <SCH_AddTask+0x208>)
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4403      	add	r3, r0
 8000740:	3308      	adds	r3, #8
 8000742:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000744:	7efa      	ldrb	r2, [r7, #27]
 8000746:	4915      	ldr	r1, [pc, #84]	; (800079c <SCH_AddTask+0x208>)
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	3308      	adds	r3, #8
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 800075a:	7efa      	ldrb	r2, [r7, #27]
 800075c:	490f      	ldr	r1, [pc, #60]	; (800079c <SCH_AddTask+0x208>)
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	440b      	add	r3, r1
 8000768:	3310      	adds	r3, #16
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 800076e:	7efa      	ldrb	r2, [r7, #27]
 8000770:	490a      	ldr	r1, [pc, #40]	; (800079c <SCH_AddTask+0x208>)
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	3304      	adds	r3, #4
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	e007      	b.n	8000792 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000782:	7efb      	ldrb	r3, [r7, #27]
 8000784:	3301      	adds	r3, #1
 8000786:	76fb      	strb	r3, [r7, #27]
 8000788:	7efb      	ldrb	r3, [r7, #27]
 800078a:	2b07      	cmp	r3, #7
 800078c:	f67f af18 	bls.w	80005c0 <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8000790:	2308      	movs	r3, #8
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	bcb0      	pop	{r4, r5, r7}
 800079a:	4770      	bx	lr
 800079c:	20000150 	.word	0x20000150

080007a0 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 80007a0:	b4b0      	push	{r4, r5, r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e075      	b.n	800089c <SCH_DeleteTask+0xfc>
        if (tasks[i].id == id) {
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	493f      	ldr	r1, [pc, #252]	; (80008b0 <SCH_DeleteTask+0x110>)
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	440b      	add	r3, r1
 80007be:	3304      	adds	r3, #4
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d166      	bne.n	8000896 <SCH_DeleteTask+0xf6>
            uint8_t currentID = tasks[i].id;
 80007c8:	7bfa      	ldrb	r2, [r7, #15]
 80007ca:	4939      	ldr	r1, [pc, #228]	; (80008b0 <SCH_DeleteTask+0x110>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	4933      	ldr	r1, [pc, #204]	; (80008b0 <SCH_DeleteTask+0x110>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d01d      	beq.n	800082e <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	492e      	ldr	r1, [pc, #184]	; (80008b0 <SCH_DeleteTask+0x110>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3308      	adds	r3, #8
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	4829      	ldr	r0, [pc, #164]	; (80008b0 <SCH_DeleteTask+0x110>)
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4403      	add	r3, r0
 8000814:	3308      	adds	r3, #8
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	3201      	adds	r2, #1
 800081c:	4419      	add	r1, r3
 800081e:	4824      	ldr	r0, [pc, #144]	; (80008b0 <SCH_DeleteTask+0x110>)
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4403      	add	r3, r0
 800082a:	3308      	adds	r3, #8
 800082c:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	73bb      	strb	r3, [r7, #14]
 8000832:	e017      	b.n	8000864 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	7bb9      	ldrb	r1, [r7, #14]
 800083a:	481d      	ldr	r0, [pc, #116]	; (80008b0 <SCH_DeleteTask+0x110>)
 800083c:	460b      	mov	r3, r1
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4418      	add	r0, r3
 8000846:	491a      	ldr	r1, [pc, #104]	; (80008b0 <SCH_DeleteTask+0x110>)
 8000848:	4613      	mov	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	4604      	mov	r4, r0
 8000854:	461d      	mov	r5, r3
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085a:	682b      	ldr	r3, [r5, #0]
 800085c:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	3301      	adds	r3, #1
 8000862:	73bb      	strb	r3, [r7, #14]
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	2b06      	cmp	r3, #6
 8000868:	d9e4      	bls.n	8000834 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <SCH_DeleteTask+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <SCH_DeleteTask+0x110>)
 8000874:	7b7b      	ldrb	r3, [r7, #13]
 8000876:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <SCH_DeleteTask+0x110>)
 800087c:	2200      	movs	r2, #0
 800087e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <SCH_DeleteTask+0x110>)
 8000884:	2200      	movs	r2, #0
 8000886:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <SCH_DeleteTask+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            return 1;
 8000892:	2301      	movs	r3, #1
 8000894:	e006      	b.n	80008a4 <SCH_DeleteTask+0x104>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	3301      	adds	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2b07      	cmp	r3, #7
 80008a0:	d986      	bls.n	80007b0 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bcb0      	pop	{r4, r5, r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000150 	.word	0x20000150

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_MspInit+0x40>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_MspInit+0x40>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x40>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x40>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_MspInit+0x40>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_MspInit+0x40>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000908:	d114      	bne.n	8000934 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_TIM_Base_MspInit+0x78>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_TIM_Base_MspInit+0x78>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_TIM_Base_MspInit+0x78>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	201c      	movs	r0, #28
 8000928:	f000 fa59 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800092c:	201c      	movs	r0, #28
 800092e:	f000 fa72 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000932:	e018      	b.n	8000966 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_TIM_Base_MspInit+0x7c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d113      	bne.n	8000966 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_TIM_Base_MspInit+0x78>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <HAL_TIM_Base_MspInit+0x78>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_TIM_Base_MspInit+0x78>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	201d      	movs	r0, #29
 800095c:	f000 fa3f 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000960:	201d      	movs	r0, #29
 8000962:	f000 fa58 	bl	8000e16 <HAL_NVIC_EnableIRQ>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	40000400 	.word	0x40000400

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_UART_MspInit+0x98>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d137      	bne.n	8000a08 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a2:	61d3      	str	r3, [r2, #28]
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c8:	2304      	movs	r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <HAL_UART_MspInit+0xa0>)
 80009dc:	f000 fae8 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e0:	2308      	movs	r3, #8
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_UART_MspInit+0xa0>)
 80009f4:	f000 fadc 	bl	8000fb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2026      	movs	r0, #38	; 0x26
 80009fe:	f000 f9ee 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a02:	2026      	movs	r0, #38	; 0x26
 8000a04:	f000 fa07 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f8c9 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM2_IRQHandler+0x10>)
 8000a72:	f001 f8dd 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000078 	.word	0x20000078

08000a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <TIM3_IRQHandler+0x10>)
 8000a86:	f001 f8d3 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000c0 	.word	0x200000c0

08000a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <USART2_IRQHandler+0x10>)
 8000a9a:	f001 fce9 	bl	8002470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000108 	.word	0x20000108

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f002 fa42 	bl	8002f60 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20002800 	.word	0x20002800
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	200001f0 	.word	0x200001f0
 8000b10:	20000340 	.word	0x20000340

08000b14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b20:	f7ff fff8 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b26:	490c      	ldr	r1, [pc, #48]	; (8000b58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b3c:	4c09      	ldr	r4, [pc, #36]	; (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 fa0f 	bl	8002f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff fb17 	bl	8000180 <main>
  bx lr
 8000b52:	4770      	bx	lr
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b5c:	080038fc 	.word	0x080038fc
  ldr r2, =_sbss
 8000b60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b64:	20000340 	.word	0x20000340

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x28>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f923 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe94 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f93b 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f903 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200001f4 	.word	0x200001f4

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	200001f4 	.word	0x200001f4

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4906      	ldr	r1, [pc, #24]	; (8000cc8 <__NVIC_EnableIRQ+0x34>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff90 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff2d 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff42 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff90 	bl	8000d20 <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5f 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff35 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d008      	beq.n	8000e74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e020      	b.n	8000eb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020e 	bic.w	r2, r2, #14
 8000e82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d005      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2204      	movs	r2, #4
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e051      	b.n	8000f88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020e 	bic.w	r2, r2, #14
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_DMA_Abort_IT+0xd4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d029      	beq.n	8000f62 <HAL_DMA_Abort_IT+0xa2>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <HAL_DMA_Abort_IT+0xd8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x9e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_DMA_Abort_IT+0xdc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d01a      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x98>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_DMA_Abort_IT+0xe0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d012      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x92>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_DMA_Abort_IT+0xe4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00a      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x8c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_DMA_Abort_IT+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d102      	bne.n	8000f46 <HAL_DMA_Abort_IT+0x86>
 8000f40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f44:	e00e      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4a:	e00b      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	e008      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	e005      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	e002      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f5e:	2310      	movs	r3, #16
 8000f60:	e000      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f62:	2301      	movs	r3, #1
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_DMA_Abort_IT+0xec>)
 8000f66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
    } 
  }
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020008 	.word	0x40020008
 8000f98:	4002001c 	.word	0x4002001c
 8000f9c:	40020030 	.word	0x40020030
 8000fa0:	40020044 	.word	0x40020044
 8000fa4:	40020058 	.word	0x40020058
 8000fa8:	4002006c 	.word	0x4002006c
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e161      	b.n	8001288 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8150 	bne.w	8001282 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4a97      	ldr	r2, [pc, #604]	; (8001244 <HAL_GPIO_Init+0x294>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d05e      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8000fec:	4a95      	ldr	r2, [pc, #596]	; (8001244 <HAL_GPIO_Init+0x294>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d875      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8000ff2:	4a95      	ldr	r2, [pc, #596]	; (8001248 <HAL_GPIO_Init+0x298>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d058      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8000ff8:	4a93      	ldr	r2, [pc, #588]	; (8001248 <HAL_GPIO_Init+0x298>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d86f      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8000ffe:	4a93      	ldr	r2, [pc, #588]	; (800124c <HAL_GPIO_Init+0x29c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d052      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8001004:	4a91      	ldr	r2, [pc, #580]	; (800124c <HAL_GPIO_Init+0x29c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d869      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 800100a:	4a91      	ldr	r2, [pc, #580]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d04c      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8001010:	4a8f      	ldr	r2, [pc, #572]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d863      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8001016:	4a8f      	ldr	r2, [pc, #572]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d046      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 800101c:	4a8d      	ldr	r2, [pc, #564]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d85d      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8001022:	2b12      	cmp	r3, #18
 8001024:	d82a      	bhi.n	800107c <HAL_GPIO_Init+0xcc>
 8001026:	2b12      	cmp	r3, #18
 8001028:	d859      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <HAL_GPIO_Init+0x80>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	080010ab 	.word	0x080010ab
 8001034:	08001085 	.word	0x08001085
 8001038:	08001097 	.word	0x08001097
 800103c:	080010d9 	.word	0x080010d9
 8001040:	080010df 	.word	0x080010df
 8001044:	080010df 	.word	0x080010df
 8001048:	080010df 	.word	0x080010df
 800104c:	080010df 	.word	0x080010df
 8001050:	080010df 	.word	0x080010df
 8001054:	080010df 	.word	0x080010df
 8001058:	080010df 	.word	0x080010df
 800105c:	080010df 	.word	0x080010df
 8001060:	080010df 	.word	0x080010df
 8001064:	080010df 	.word	0x080010df
 8001068:	080010df 	.word	0x080010df
 800106c:	080010df 	.word	0x080010df
 8001070:	080010df 	.word	0x080010df
 8001074:	0800108d 	.word	0x0800108d
 8001078:	080010a1 	.word	0x080010a1
 800107c:	4a76      	ldr	r2, [pc, #472]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001082:	e02c      	b.n	80010de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e029      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e024      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	3308      	adds	r3, #8
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e01f      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	330c      	adds	r3, #12
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e01a      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010b2:	2304      	movs	r3, #4
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e013      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c0:	2308      	movs	r3, #8
 80010c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	611a      	str	r2, [r3, #16]
          break;
 80010ca:	e009      	b.n	80010e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	615a      	str	r2, [r3, #20]
          break;
 80010d6:	e003      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          break;
 80010de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d801      	bhi.n	80010ea <HAL_GPIO_Init+0x13a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_Init+0x13e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d802      	bhi.n	80010fc <HAL_GPIO_Init+0x14c>
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_Init+0x152>
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3b08      	subs	r3, #8
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	210f      	movs	r1, #15
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	6a39      	ldr	r1, [r7, #32]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	431a      	orrs	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80a9 	beq.w	8001282 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001130:	4b4a      	ldr	r3, [pc, #296]	; (800125c <HAL_GPIO_Init+0x2ac>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a49      	ldr	r2, [pc, #292]	; (800125c <HAL_GPIO_Init+0x2ac>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_GPIO_Init+0x2ac>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <HAL_GPIO_Init+0x2b4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d00d      	beq.n	8001190 <HAL_GPIO_Init+0x1e0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x1dc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3b      	ldr	r2, [pc, #236]	; (800126c <HAL_GPIO_Init+0x2bc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d101      	bne.n	8001188 <HAL_GPIO_Init+0x1d8>
 8001184:	2302      	movs	r3, #2
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001188:	2303      	movs	r3, #3
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x1e2>
 8001190:	2300      	movs	r3, #0
 8001192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011a2:	492f      	ldr	r1, [pc, #188]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	492b      	ldr	r1, [pc, #172]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4927      	ldr	r1, [pc, #156]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	4921      	ldr	r1, [pc, #132]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	60cb      	str	r3, [r1, #12]
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	491d      	ldr	r1, [pc, #116]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4917      	ldr	r1, [pc, #92]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4913      	ldr	r1, [pc, #76]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 8001224:	4013      	ands	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01f      	beq.n	8001274 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	490d      	ldr	r1, [pc, #52]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e01f      	b.n	8001282 <HAL_GPIO_Init+0x2d2>
 8001242:	bf00      	nop
 8001244:	10320000 	.word	0x10320000
 8001248:	10310000 	.word	0x10310000
 800124c:	10220000 	.word	0x10220000
 8001250:	10210000 	.word	0x10210000
 8001254:	10120000 	.word	0x10120000
 8001258:	10110000 	.word	0x10110000
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	40010800 	.word	0x40010800
 8001268:	40010c00 	.word	0x40010c00
 800126c:	40011000 	.word	0x40011000
 8001270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_GPIO_Init+0x2f4>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	43db      	mvns	r3, r3
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <HAL_GPIO_Init+0x2f4>)
 800127e:	4013      	ands	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f ae96 	bne.w	8000fc4 <HAL_GPIO_Init+0x14>
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	372c      	adds	r7, #44	; 0x2c
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	611a      	str	r2, [r3, #16]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e272      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8087 	beq.w	8001406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f8:	4b92      	ldr	r3, [pc, #584]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d112      	bne.n	8001336 <HAL_RCC_OscConfig+0x5e>
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d10b      	bne.n	8001336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4b89      	ldr	r3, [pc, #548]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d06c      	beq.n	8001404 <HAL_RCC_OscConfig+0x12c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d168      	bne.n	8001404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e24c      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x76>
 8001340:	4b80      	ldr	r3, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a7f      	ldr	r2, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e02e      	b.n	80013ac <HAL_RCC_OscConfig+0xd4>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x98>
 8001356:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7a      	ldr	r2, [pc, #488]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b78      	ldr	r3, [pc, #480]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a77      	ldr	r2, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xd4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0xbc>
 800137a:	4b72      	ldr	r3, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a71      	ldr	r2, [pc, #452]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6e      	ldr	r2, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xd4>
 8001394:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6a      	ldr	r2, [pc, #424]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a67      	ldr	r2, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc32 	bl	8000c1c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fc2e 	bl	8000c1c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e200      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xe4>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc1e 	bl	8000c1c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fc1a 	bl	8000c1c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1ec      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x10c>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d063      	beq.n	80014da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x18c>
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x176>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1c0      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4939      	ldr	r1, [pc, #228]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e03a      	b.n	80014da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fbd3 	bl	8000c1c <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fbcf 	bl	8000c1c <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1a1      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4927      	ldr	r1, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_RCC_OscConfig+0x270>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fbb2 	bl	8000c1c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fbae 	bl	8000c1c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e180      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03a      	beq.n	800155c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d019      	beq.n	8001522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_RCC_OscConfig+0x274>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fb92 	bl	8000c1c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb8e 	bl	8000c1c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e160      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_RCC_OscConfig+0x26c>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800151a:	2001      	movs	r0, #1
 800151c:	f000 face 	bl	8001abc <RCC_Delay>
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_RCC_OscConfig+0x274>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fb78 	bl	8000c1c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152e:	e00f      	b.n	8001550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fb74 	bl	8000c1c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d908      	bls.n	8001550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e146      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	42420000 	.word	0x42420000
 800154c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e9      	bne.n	8001530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a6 	beq.w	80016b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156e:	4b8b      	ldr	r3, [pc, #556]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10d      	bne.n	8001596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a87      	ldr	r2, [pc, #540]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b85      	ldr	r3, [pc, #532]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d118      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7e      	ldr	r2, [pc, #504]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 80015a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb35 	bl	8000c1c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7ff fb31 	bl	8000c1c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b64      	cmp	r3, #100	; 0x64
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e103      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <HAL_RCC_OscConfig+0x4c8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x312>
 80015dc:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a6e      	ldr	r2, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	e02d      	b.n	8001646 <HAL_RCC_OscConfig+0x36e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x334>
 80015f2:	4b6a      	ldr	r3, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a69      	ldr	r2, [pc, #420]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	4b67      	ldr	r3, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a66      	ldr	r2, [pc, #408]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	e01c      	b.n	8001646 <HAL_RCC_OscConfig+0x36e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0x356>
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a60      	ldr	r2, [pc, #384]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4b5e      	ldr	r3, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a5d      	ldr	r2, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0x36e>
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a5a      	ldr	r2, [pc, #360]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d015      	beq.n	800167a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fae5 	bl	8000c1c <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fae1 	bl	8000c1c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	; 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e0b1      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166c:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ee      	beq.n	8001656 <HAL_RCC_OscConfig+0x37e>
 8001678:	e014      	b.n	80016a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff facf 	bl	8000c1c <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff facb 	bl	8000c1c <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e09b      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ee      	bne.n	8001682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d105      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a3b      	ldr	r2, [pc, #236]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8087 	beq.w	80017ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d061      	beq.n	8001790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d146      	bne.n	8001762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_RCC_OscConfig+0x4cc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fa9f 	bl	8000c1c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fa9b 	bl	8000c1c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e06d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d108      	bne.n	800171c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4921      	ldr	r1, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a19      	ldr	r1, [r3, #32]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	430b      	orrs	r3, r1
 800172e:	491b      	ldr	r1, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x4cc>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa6f 	bl	8000c1c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fa6b 	bl	8000c1c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e03d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x46a>
 8001760:	e035      	b.n	80017ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_OscConfig+0x4cc>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa58 	bl	8000c1c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fa54 	bl	8000c1c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e026      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x4c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x498>
 800178e:	e01e      	b.n	80017ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e019      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
 800179c:	40021000 	.word	0x40021000
 80017a0:	40007000 	.word	0x40007000
 80017a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x500>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0d0      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d910      	bls.n	8001820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4965      	ldr	r1, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d040      	beq.n	80018fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e073      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4936      	ldr	r1, [pc, #216]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f9a6 	bl	8000c1c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f9a2 	bl	8000c1c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e053      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d210      	bcs.n	800192c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0207 	bic.w	r2, r3, #7
 8001912:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f904 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08003894 	.word	0x08003894
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x94>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x30>
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x36>
 80019de:	e027      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80019e2:	613b      	str	r3, [r7, #16]
      break;
 80019e4:	e027      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0c5b      	lsrs	r3, r3, #17
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a12:	fb03 f202 	mul.w	r2, r3, r2
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e004      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	613b      	str	r3, [r7, #16]
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a32:	613b      	str	r3, [r7, #16]
      break;
 8001a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a36:	693b      	ldr	r3, [r7, #16]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	007a1200 	.word	0x007a1200
 8001a4c:	080038ac 	.word	0x080038ac
 8001a50:	080038bc 	.word	0x080038bc
 8001a54:	003d0900 	.word	0x003d0900

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a70:	f7ff fff2 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	080038a4 	.word	0x080038a4

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	0adb      	lsrs	r3, r3, #11
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	080038a4 	.word	0x080038a4

08001abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <RCC_Delay+0x34>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <RCC_Delay+0x38>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad8:	bf00      	nop
  }
  while (Delay --);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	60fa      	str	r2, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <RCC_Delay+0x1c>
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000000 	.word	0x20000000
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e041      	b.n	8001b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe feea 	bl	80008f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3304      	adds	r3, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f000 fa6e 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d001      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e035      	b.n	8001c1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_TIM_Base_Start_IT+0x90>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d009      	beq.n	8001be6 <HAL_TIM_Base_Start_IT+0x4e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d004      	beq.n	8001be6 <HAL_TIM_Base_Start_IT+0x4e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_TIM_Base_Start_IT+0x94>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d111      	bne.n	8001c0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d010      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	e007      	b.n	8001c1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40012c00 	.word	0x40012c00
 8001c2c:	40000400 	.word	0x40000400

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0202 	mvn.w	r2, #2
 8001c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f9b4 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f9a7 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f9b6 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0204 	mvn.w	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f98a 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f97d 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f98c 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0208 	mvn.w	r2, #8
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f960 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f953 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f962 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0210 	mvn.w	r2, #16
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f936 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f929 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f938 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0201 	mvn.w	r2, #1
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fb3e 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b80      	cmp	r3, #128	; 0x80
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa6b 	bl	80022b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b40      	cmp	r3, #64	; 0x40
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8fc 	bl	8002004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0220 	mvn.w	r2, #32
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa36 	bl	80022a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_TIM_ConfigClockSource+0x1c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0b4      	b.n	8001fc6 <HAL_TIM_ConfigClockSource+0x186>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e94:	d03e      	beq.n	8001f14 <HAL_TIM_ConfigClockSource+0xd4>
 8001e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9a:	f200 8087 	bhi.w	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea2:	f000 8086 	beq.w	8001fb2 <HAL_TIM_ConfigClockSource+0x172>
 8001ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eaa:	d87f      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001eac:	2b70      	cmp	r3, #112	; 0x70
 8001eae:	d01a      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8001eb0:	2b70      	cmp	r3, #112	; 0x70
 8001eb2:	d87b      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001eb4:	2b60      	cmp	r3, #96	; 0x60
 8001eb6:	d050      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0x11a>
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d877      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ebc:	2b50      	cmp	r3, #80	; 0x50
 8001ebe:	d03c      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0xfa>
 8001ec0:	2b50      	cmp	r3, #80	; 0x50
 8001ec2:	d873      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d058      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x13a>
 8001ec8:	2b40      	cmp	r3, #64	; 0x40
 8001eca:	d86f      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ecc:	2b30      	cmp	r3, #48	; 0x30
 8001ece:	d064      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ed0:	2b30      	cmp	r3, #48	; 0x30
 8001ed2:	d86b      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d060      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d867      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05c      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d05a      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ee4:	e062      	b.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ef6:	f000 f95e 	bl	80021b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	609a      	str	r2, [r3, #8]
      break;
 8001f12:	e04f      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f24:	f000 f947 	bl	80021b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f36:	609a      	str	r2, [r3, #8]
      break;
 8001f38:	e03c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f46:	461a      	mov	r2, r3
 8001f48:	f000 f8be 	bl	80020c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2150      	movs	r1, #80	; 0x50
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f915 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001f58:	e02c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f66:	461a      	mov	r2, r3
 8001f68:	f000 f8dc 	bl	8002124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2160      	movs	r1, #96	; 0x60
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f905 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001f78:	e01c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f86:	461a      	mov	r2, r3
 8001f88:	f000 f89e 	bl	80020c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f8f5 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001f98:	e00c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 f8ec 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001faa:	e003      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <TIM_Base_SetConfig+0xa8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x28>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x28>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <TIM_Base_SetConfig+0xac>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <TIM_Base_SetConfig+0xa8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0x52>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0x52>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <TIM_Base_SetConfig+0xac>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <TIM_Base_SetConfig+0xa8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400

080020c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	f023 0201 	bic.w	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f023 030a 	bic.w	r3, r3, #10
 8002104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	621a      	str	r2, [r3, #32]
}
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f023 0210 	bic.w	r2, r3, #16
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800214e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	031b      	lsls	r3, r3, #12
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002160:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	621a      	str	r2, [r3, #32]
}
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	f043 0307 	orr.w	r3, r3, #7
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4313      	orrs	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002208:	2302      	movs	r3, #2
 800220a:	e041      	b.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d004      	beq.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10c      	bne.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4313      	orrs	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40000400 	.word	0x40000400

080022a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e042      	b.n	8002360 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fb42 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800230a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fd71 	bl	8002df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b20      	cmp	r3, #32
 8002386:	d16d      	bne.n	8002464 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_UART_Transmit+0x2c>
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e066      	b.n	8002466 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fc39 	bl	8000c1c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Transmit+0x6c>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023dc:	e02a      	b.n	8002434 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 faf9 	bl	80029e0 <UART_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e036      	b.n	8002466 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	3302      	adds	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e007      	b.n	8002426 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3301      	adds	r3, #1
 8002424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1cf      	bne.n	80023de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fac9 	bl	80029e0 <UART_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e006      	b.n	8002466 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0ba      	sub	sp, #232	; 0xe8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_UART_IRQHandler+0x66>
 80024c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fbd1 	bl	8002c76 <UART_Receive_IT>
      return;
 80024d4:	e25b      	b.n	800298e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80de 	beq.w	800269c <HAL_UART_IRQHandler+0x22c>
 80024e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80d1 	beq.w	800269c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_UART_IRQHandler+0xae>
 8002506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_UART_IRQHandler+0xd2>
 800252a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_UART_IRQHandler+0xf6>
 800254e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d011      	beq.n	8002596 <HAL_UART_IRQHandler+0x126>
 8002572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800257e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0208 	orr.w	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 81f2 	beq.w	8002984 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_UART_IRQHandler+0x14e>
 80025ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fb5c 	bl	8002c76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <HAL_UART_IRQHandler+0x17a>
 80025e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d04f      	beq.n	800268a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa66 	bl	8002abc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d041      	beq.n	8002682 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3314      	adds	r3, #20
 8002604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800261c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800262a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800262e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1d9      	bne.n	80025fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d013      	beq.n	800267a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	4a7e      	ldr	r2, [pc, #504]	; (8002850 <HAL_UART_IRQHandler+0x3e0>)
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc2e 	bl	8000ec0 <HAL_DMA_Abort_IT>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002674:	4610      	mov	r0, r2
 8002676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002678:	e00e      	b.n	8002698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f99c 	bl	80029b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002680:	e00a      	b.n	8002698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f998 	bl	80029b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002688:	e006      	b.n	8002698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f994 	bl	80029b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002696:	e175      	b.n	8002984 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	bf00      	nop
    return;
 800269a:	e173      	b.n	8002984 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	f040 814f 	bne.w	8002944 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8148 	beq.w	8002944 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8141 	beq.w	8002944 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80b6 	beq.w	8002854 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8145 	beq.w	8002988 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002706:	429a      	cmp	r2, r3
 8002708:	f080 813e 	bcs.w	8002988 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002712:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b20      	cmp	r3, #32
 800271c:	f000 8088 	beq.w	8002830 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800272e:	e853 3f00 	ldrex	r3, [r3]
 8002732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800273a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800273e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800274c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002758:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1d9      	bne.n	8002720 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800277c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002790:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002794:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002798:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800279c:	e841 2300 	strex	r3, r2, [r1]
 80027a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e1      	bne.n	800276c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3314      	adds	r3, #20
 80027ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3314      	adds	r3, #20
 80027c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e3      	bne.n	80027a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	f023 0310 	bic.w	r3, r3, #16
 8002804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	330c      	adds	r3, #12
 800280e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002812:	65ba      	str	r2, [r7, #88]	; 0x58
 8002814:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e3      	bne.n	80027ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fb0d 	bl	8000e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283e:	b29b      	uxth	r3, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b29b      	uxth	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8bf 	bl	80029ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800284c:	e09c      	b.n	8002988 <HAL_UART_IRQHandler+0x518>
 800284e:	bf00      	nop
 8002850:	08002b81 	.word	0x08002b81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800285c:	b29b      	uxth	r3, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 808e 	beq.w	800298c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8089 	beq.w	800298c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	330c      	adds	r3, #12
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800289e:	647a      	str	r2, [r7, #68]	; 0x44
 80028a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e3      	bne.n	800287a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3314      	adds	r3, #20
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	623b      	str	r3, [r7, #32]
   return(result);
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3314      	adds	r3, #20
 80028d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028d6:	633a      	str	r2, [r7, #48]	; 0x30
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e3      	bne.n	80028b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	e853 3f00 	ldrex	r3, [r3]
 8002906:	60fb      	str	r3, [r7, #12]
   return(result);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0310 	bic.w	r3, r3, #16
 800290e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800291c:	61fa      	str	r2, [r7, #28]
 800291e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	e841 2300 	strex	r3, r2, [r1]
 8002928:	617b      	str	r3, [r7, #20]
   return(result);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e3      	bne.n	80028f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002936:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f844 	bl	80029ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002942:	e023      	b.n	800298c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HAL_UART_IRQHandler+0x4f4>
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f923 	bl	8002ba8 <UART_Transmit_IT>
    return;
 8002962:	e014      	b.n	800298e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <HAL_UART_IRQHandler+0x51e>
 8002970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f962 	bl	8002c46 <UART_EndTransmit_IT>
    return;
 8002982:	e004      	b.n	800298e <HAL_UART_IRQHandler+0x51e>
    return;
 8002984:	bf00      	nop
 8002986:	e002      	b.n	800298e <HAL_UART_IRQHandler+0x51e>
      return;
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <HAL_UART_IRQHandler+0x51e>
      return;
 800298c:	bf00      	nop
  }
}
 800298e:	37e8      	adds	r7, #232	; 0xe8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b090      	sub	sp, #64	; 0x40
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f0:	e050      	b.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d04c      	beq.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a00:	f7fe f90c 	bl	8000c1c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d241      	bcs.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a30:	637a      	str	r2, [r7, #52]	; 0x34
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	613b      	str	r3, [r7, #16]
   return(result);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3314      	adds	r3, #20
 8002a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a64:	623a      	str	r2, [r7, #32]
 8002a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	69f9      	ldr	r1, [r7, #28]
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e00f      	b.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d09f      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3740      	adds	r7, #64	; 0x40
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b095      	sub	sp, #84	; 0x54
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	e853 3f00 	ldrex	r3, [r3]
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aec:	e841 2300 	strex	r3, r2, [r1]
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e5      	bne.n	8002ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3314      	adds	r3, #20
 8002afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e5      	bne.n	8002af8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d119      	bne.n	8002b68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f023 0310 	bic.w	r3, r3, #16
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b54:	61ba      	str	r2, [r7, #24]
 8002b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6979      	ldr	r1, [r7, #20]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	613b      	str	r3, [r7, #16]
   return(result);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b76:	bf00      	nop
 8002b78:	3754      	adds	r7, #84	; 0x54
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7ff ff0c 	bl	80029b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d13e      	bne.n	8002c3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	d114      	bne.n	8002bf0 <UART_Transmit_IT+0x48>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d110      	bne.n	8002bf0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]
 8002bee:	e008      	b.n	8002c02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	1c59      	adds	r1, r3, #1
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6211      	str	r1, [r2, #32]
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fe94 	bl	8002994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08c      	sub	sp, #48	; 0x30
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b22      	cmp	r3, #34	; 0x22
 8002c88:	f040 80ae 	bne.w	8002de8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c94:	d117      	bne.n	8002cc6 <UART_Receive_IT+0x50>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d113      	bne.n	8002cc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	1c9a      	adds	r2, r3, #2
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc4:	e026      	b.n	8002d14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd8:	d007      	beq.n	8002cea <UART_Receive_IT+0x74>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <UART_Receive_IT+0x82>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e008      	b.n	8002d0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4619      	mov	r1, r3
 8002d22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d15d      	bne.n	8002de4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0220 	bic.w	r2, r2, #32
 8002d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d135      	bne.n	8002dda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	613b      	str	r3, [r7, #16]
   return(result);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f023 0310 	bic.w	r3, r3, #16
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	623a      	str	r2, [r7, #32]
 8002d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	69f9      	ldr	r1, [r7, #28]
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d10a      	bne.n	8002dcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fdf9 	bl	80029ca <HAL_UARTEx_RxEventCallback>
 8002dd8:	e002      	b.n	8002de0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fde3 	bl	80029a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e002      	b.n	8002dea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3730      	adds	r7, #48	; 0x30
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e2e:	f023 030c 	bic.w	r3, r3, #12
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <UART_SetConfig+0x114>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d103      	bne.n	8002e64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7fe fe1a 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	e002      	b.n	8002e6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e64:	f7fe fe02 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8002e68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009a      	lsls	r2, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <UART_SetConfig+0x118>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	0119      	lsls	r1, r3, #4
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009a      	lsls	r2, r3, #2
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <UART_SetConfig+0x118>)
 8002ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2064      	movs	r0, #100	; 0x64
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	3332      	adds	r3, #50	; 0x32
 8002eb4:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <UART_SetConfig+0x118>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec0:	4419      	add	r1, r3
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009a      	lsls	r2, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <UART_SetConfig+0x118>)
 8002eda:	fba3 0302 	umull	r0, r3, r3, r2
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2064      	movs	r0, #100	; 0x64
 8002ee2:	fb00 f303 	mul.w	r3, r0, r3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	; 0x32
 8002eec:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <UART_SetConfig+0x118>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	440a      	add	r2, r1
 8002efe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	51eb851f 	.word	0x51eb851f

08002f10 <siprintf>:
 8002f10:	b40e      	push	{r1, r2, r3}
 8002f12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f16:	b500      	push	{lr}
 8002f18:	b09c      	sub	sp, #112	; 0x70
 8002f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f1c:	9002      	str	r0, [sp, #8]
 8002f1e:	9006      	str	r0, [sp, #24]
 8002f20:	9107      	str	r1, [sp, #28]
 8002f22:	9104      	str	r1, [sp, #16]
 8002f24:	4808      	ldr	r0, [pc, #32]	; (8002f48 <siprintf+0x38>)
 8002f26:	4909      	ldr	r1, [pc, #36]	; (8002f4c <siprintf+0x3c>)
 8002f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f2c:	9105      	str	r1, [sp, #20]
 8002f2e:	6800      	ldr	r0, [r0, #0]
 8002f30:	a902      	add	r1, sp, #8
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	f000 f98e 	bl	8003254 <_svfiprintf_r>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	9b02      	ldr	r3, [sp, #8]
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	b01c      	add	sp, #112	; 0x70
 8002f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f44:	b003      	add	sp, #12
 8002f46:	4770      	bx	lr
 8002f48:	20000058 	.word	0x20000058
 8002f4c:	ffff0208 	.word	0xffff0208

08002f50 <memset>:
 8002f50:	4603      	mov	r3, r0
 8002f52:	4402      	add	r2, r0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memset+0xa>
 8002f58:	4770      	bx	lr
 8002f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5e:	e7f9      	b.n	8002f54 <memset+0x4>

08002f60 <__errno>:
 8002f60:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <__errno+0x8>)
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000058 	.word	0x20000058

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	2600      	movs	r6, #0
 8002f70:	4d0c      	ldr	r5, [pc, #48]	; (8002fa4 <__libc_init_array+0x38>)
 8002f72:	4c0d      	ldr	r4, [pc, #52]	; (8002fa8 <__libc_init_array+0x3c>)
 8002f74:	1b64      	subs	r4, r4, r5
 8002f76:	10a4      	asrs	r4, r4, #2
 8002f78:	42a6      	cmp	r6, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	f000 fc7a 	bl	8003874 <_init>
 8002f80:	2600      	movs	r6, #0
 8002f82:	4d0a      	ldr	r5, [pc, #40]	; (8002fac <__libc_init_array+0x40>)
 8002f84:	4c0a      	ldr	r4, [pc, #40]	; (8002fb0 <__libc_init_array+0x44>)
 8002f86:	1b64      	subs	r4, r4, r5
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	42a6      	cmp	r6, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f94:	4798      	blx	r3
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9e:	4798      	blx	r3
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	080038f4 	.word	0x080038f4
 8002fa8:	080038f4 	.word	0x080038f4
 8002fac:	080038f4 	.word	0x080038f4
 8002fb0:	080038f8 	.word	0x080038f8

08002fb4 <__retarget_lock_acquire_recursive>:
 8002fb4:	4770      	bx	lr

08002fb6 <__retarget_lock_release_recursive>:
 8002fb6:	4770      	bx	lr

08002fb8 <_free_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4605      	mov	r5, r0
 8002fbc:	2900      	cmp	r1, #0
 8002fbe:	d040      	beq.n	8003042 <_free_r+0x8a>
 8002fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc4:	1f0c      	subs	r4, r1, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bfb8      	it	lt
 8002fca:	18e4      	addlt	r4, r4, r3
 8002fcc:	f000 f8dc 	bl	8003188 <__malloc_lock>
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <_free_r+0x8c>)
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	b933      	cbnz	r3, 8002fe4 <_free_r+0x2c>
 8002fd6:	6063      	str	r3, [r4, #4]
 8002fd8:	6014      	str	r4, [r2, #0]
 8002fda:	4628      	mov	r0, r5
 8002fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe0:	f000 b8d8 	b.w	8003194 <__malloc_unlock>
 8002fe4:	42a3      	cmp	r3, r4
 8002fe6:	d908      	bls.n	8002ffa <_free_r+0x42>
 8002fe8:	6820      	ldr	r0, [r4, #0]
 8002fea:	1821      	adds	r1, r4, r0
 8002fec:	428b      	cmp	r3, r1
 8002fee:	bf01      	itttt	eq
 8002ff0:	6819      	ldreq	r1, [r3, #0]
 8002ff2:	685b      	ldreq	r3, [r3, #4]
 8002ff4:	1809      	addeq	r1, r1, r0
 8002ff6:	6021      	streq	r1, [r4, #0]
 8002ff8:	e7ed      	b.n	8002fd6 <_free_r+0x1e>
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	b10b      	cbz	r3, 8003004 <_free_r+0x4c>
 8003000:	42a3      	cmp	r3, r4
 8003002:	d9fa      	bls.n	8002ffa <_free_r+0x42>
 8003004:	6811      	ldr	r1, [r2, #0]
 8003006:	1850      	adds	r0, r2, r1
 8003008:	42a0      	cmp	r0, r4
 800300a:	d10b      	bne.n	8003024 <_free_r+0x6c>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	4401      	add	r1, r0
 8003010:	1850      	adds	r0, r2, r1
 8003012:	4283      	cmp	r3, r0
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	d1e0      	bne.n	8002fda <_free_r+0x22>
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4408      	add	r0, r1
 800301e:	6010      	str	r0, [r2, #0]
 8003020:	6053      	str	r3, [r2, #4]
 8003022:	e7da      	b.n	8002fda <_free_r+0x22>
 8003024:	d902      	bls.n	800302c <_free_r+0x74>
 8003026:	230c      	movs	r3, #12
 8003028:	602b      	str	r3, [r5, #0]
 800302a:	e7d6      	b.n	8002fda <_free_r+0x22>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	1821      	adds	r1, r4, r0
 8003030:	428b      	cmp	r3, r1
 8003032:	bf01      	itttt	eq
 8003034:	6819      	ldreq	r1, [r3, #0]
 8003036:	685b      	ldreq	r3, [r3, #4]
 8003038:	1809      	addeq	r1, r1, r0
 800303a:	6021      	streq	r1, [r4, #0]
 800303c:	6063      	str	r3, [r4, #4]
 800303e:	6054      	str	r4, [r2, #4]
 8003040:	e7cb      	b.n	8002fda <_free_r+0x22>
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	20000338 	.word	0x20000338

08003048 <sbrk_aligned>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	4e0e      	ldr	r6, [pc, #56]	; (8003084 <sbrk_aligned+0x3c>)
 800304c:	460c      	mov	r4, r1
 800304e:	6831      	ldr	r1, [r6, #0]
 8003050:	4605      	mov	r5, r0
 8003052:	b911      	cbnz	r1, 800305a <sbrk_aligned+0x12>
 8003054:	f000 fbaa 	bl	80037ac <_sbrk_r>
 8003058:	6030      	str	r0, [r6, #0]
 800305a:	4621      	mov	r1, r4
 800305c:	4628      	mov	r0, r5
 800305e:	f000 fba5 	bl	80037ac <_sbrk_r>
 8003062:	1c43      	adds	r3, r0, #1
 8003064:	d00a      	beq.n	800307c <sbrk_aligned+0x34>
 8003066:	1cc4      	adds	r4, r0, #3
 8003068:	f024 0403 	bic.w	r4, r4, #3
 800306c:	42a0      	cmp	r0, r4
 800306e:	d007      	beq.n	8003080 <sbrk_aligned+0x38>
 8003070:	1a21      	subs	r1, r4, r0
 8003072:	4628      	mov	r0, r5
 8003074:	f000 fb9a 	bl	80037ac <_sbrk_r>
 8003078:	3001      	adds	r0, #1
 800307a:	d101      	bne.n	8003080 <sbrk_aligned+0x38>
 800307c:	f04f 34ff 	mov.w	r4, #4294967295
 8003080:	4620      	mov	r0, r4
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	2000033c 	.word	0x2000033c

08003088 <_malloc_r>:
 8003088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800308c:	1ccd      	adds	r5, r1, #3
 800308e:	f025 0503 	bic.w	r5, r5, #3
 8003092:	3508      	adds	r5, #8
 8003094:	2d0c      	cmp	r5, #12
 8003096:	bf38      	it	cc
 8003098:	250c      	movcc	r5, #12
 800309a:	2d00      	cmp	r5, #0
 800309c:	4607      	mov	r7, r0
 800309e:	db01      	blt.n	80030a4 <_malloc_r+0x1c>
 80030a0:	42a9      	cmp	r1, r5
 80030a2:	d905      	bls.n	80030b0 <_malloc_r+0x28>
 80030a4:	230c      	movs	r3, #12
 80030a6:	2600      	movs	r6, #0
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4630      	mov	r0, r6
 80030ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003184 <_malloc_r+0xfc>
 80030b4:	f000 f868 	bl	8003188 <__malloc_lock>
 80030b8:	f8d8 3000 	ldr.w	r3, [r8]
 80030bc:	461c      	mov	r4, r3
 80030be:	bb5c      	cbnz	r4, 8003118 <_malloc_r+0x90>
 80030c0:	4629      	mov	r1, r5
 80030c2:	4638      	mov	r0, r7
 80030c4:	f7ff ffc0 	bl	8003048 <sbrk_aligned>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	4604      	mov	r4, r0
 80030cc:	d155      	bne.n	800317a <_malloc_r+0xf2>
 80030ce:	f8d8 4000 	ldr.w	r4, [r8]
 80030d2:	4626      	mov	r6, r4
 80030d4:	2e00      	cmp	r6, #0
 80030d6:	d145      	bne.n	8003164 <_malloc_r+0xdc>
 80030d8:	2c00      	cmp	r4, #0
 80030da:	d048      	beq.n	800316e <_malloc_r+0xe6>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	4631      	mov	r1, r6
 80030e0:	4638      	mov	r0, r7
 80030e2:	eb04 0903 	add.w	r9, r4, r3
 80030e6:	f000 fb61 	bl	80037ac <_sbrk_r>
 80030ea:	4581      	cmp	r9, r0
 80030ec:	d13f      	bne.n	800316e <_malloc_r+0xe6>
 80030ee:	6821      	ldr	r1, [r4, #0]
 80030f0:	4638      	mov	r0, r7
 80030f2:	1a6d      	subs	r5, r5, r1
 80030f4:	4629      	mov	r1, r5
 80030f6:	f7ff ffa7 	bl	8003048 <sbrk_aligned>
 80030fa:	3001      	adds	r0, #1
 80030fc:	d037      	beq.n	800316e <_malloc_r+0xe6>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	442b      	add	r3, r5
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	f8d8 3000 	ldr.w	r3, [r8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d038      	beq.n	800317e <_malloc_r+0xf6>
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	42a2      	cmp	r2, r4
 8003110:	d12b      	bne.n	800316a <_malloc_r+0xe2>
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e00f      	b.n	8003138 <_malloc_r+0xb0>
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	1b52      	subs	r2, r2, r5
 800311c:	d41f      	bmi.n	800315e <_malloc_r+0xd6>
 800311e:	2a0b      	cmp	r2, #11
 8003120:	d917      	bls.n	8003152 <_malloc_r+0xca>
 8003122:	1961      	adds	r1, r4, r5
 8003124:	42a3      	cmp	r3, r4
 8003126:	6025      	str	r5, [r4, #0]
 8003128:	bf18      	it	ne
 800312a:	6059      	strne	r1, [r3, #4]
 800312c:	6863      	ldr	r3, [r4, #4]
 800312e:	bf08      	it	eq
 8003130:	f8c8 1000 	streq.w	r1, [r8]
 8003134:	5162      	str	r2, [r4, r5]
 8003136:	604b      	str	r3, [r1, #4]
 8003138:	4638      	mov	r0, r7
 800313a:	f104 060b 	add.w	r6, r4, #11
 800313e:	f000 f829 	bl	8003194 <__malloc_unlock>
 8003142:	f026 0607 	bic.w	r6, r6, #7
 8003146:	1d23      	adds	r3, r4, #4
 8003148:	1af2      	subs	r2, r6, r3
 800314a:	d0ae      	beq.n	80030aa <_malloc_r+0x22>
 800314c:	1b9b      	subs	r3, r3, r6
 800314e:	50a3      	str	r3, [r4, r2]
 8003150:	e7ab      	b.n	80030aa <_malloc_r+0x22>
 8003152:	42a3      	cmp	r3, r4
 8003154:	6862      	ldr	r2, [r4, #4]
 8003156:	d1dd      	bne.n	8003114 <_malloc_r+0x8c>
 8003158:	f8c8 2000 	str.w	r2, [r8]
 800315c:	e7ec      	b.n	8003138 <_malloc_r+0xb0>
 800315e:	4623      	mov	r3, r4
 8003160:	6864      	ldr	r4, [r4, #4]
 8003162:	e7ac      	b.n	80030be <_malloc_r+0x36>
 8003164:	4634      	mov	r4, r6
 8003166:	6876      	ldr	r6, [r6, #4]
 8003168:	e7b4      	b.n	80030d4 <_malloc_r+0x4c>
 800316a:	4613      	mov	r3, r2
 800316c:	e7cc      	b.n	8003108 <_malloc_r+0x80>
 800316e:	230c      	movs	r3, #12
 8003170:	4638      	mov	r0, r7
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	f000 f80e 	bl	8003194 <__malloc_unlock>
 8003178:	e797      	b.n	80030aa <_malloc_r+0x22>
 800317a:	6025      	str	r5, [r4, #0]
 800317c:	e7dc      	b.n	8003138 <_malloc_r+0xb0>
 800317e:	605b      	str	r3, [r3, #4]
 8003180:	deff      	udf	#255	; 0xff
 8003182:	bf00      	nop
 8003184:	20000338 	.word	0x20000338

08003188 <__malloc_lock>:
 8003188:	4801      	ldr	r0, [pc, #4]	; (8003190 <__malloc_lock+0x8>)
 800318a:	f7ff bf13 	b.w	8002fb4 <__retarget_lock_acquire_recursive>
 800318e:	bf00      	nop
 8003190:	20000334 	.word	0x20000334

08003194 <__malloc_unlock>:
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <__malloc_unlock+0x8>)
 8003196:	f7ff bf0e 	b.w	8002fb6 <__retarget_lock_release_recursive>
 800319a:	bf00      	nop
 800319c:	20000334 	.word	0x20000334

080031a0 <__ssputs_r>:
 80031a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a4:	461f      	mov	r7, r3
 80031a6:	688e      	ldr	r6, [r1, #8]
 80031a8:	4682      	mov	sl, r0
 80031aa:	42be      	cmp	r6, r7
 80031ac:	460c      	mov	r4, r1
 80031ae:	4690      	mov	r8, r2
 80031b0:	680b      	ldr	r3, [r1, #0]
 80031b2:	d82c      	bhi.n	800320e <__ssputs_r+0x6e>
 80031b4:	898a      	ldrh	r2, [r1, #12]
 80031b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031ba:	d026      	beq.n	800320a <__ssputs_r+0x6a>
 80031bc:	6965      	ldr	r5, [r4, #20]
 80031be:	6909      	ldr	r1, [r1, #16]
 80031c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031c4:	eba3 0901 	sub.w	r9, r3, r1
 80031c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031cc:	1c7b      	adds	r3, r7, #1
 80031ce:	444b      	add	r3, r9
 80031d0:	106d      	asrs	r5, r5, #1
 80031d2:	429d      	cmp	r5, r3
 80031d4:	bf38      	it	cc
 80031d6:	461d      	movcc	r5, r3
 80031d8:	0553      	lsls	r3, r2, #21
 80031da:	d527      	bpl.n	800322c <__ssputs_r+0x8c>
 80031dc:	4629      	mov	r1, r5
 80031de:	f7ff ff53 	bl	8003088 <_malloc_r>
 80031e2:	4606      	mov	r6, r0
 80031e4:	b360      	cbz	r0, 8003240 <__ssputs_r+0xa0>
 80031e6:	464a      	mov	r2, r9
 80031e8:	6921      	ldr	r1, [r4, #16]
 80031ea:	f000 fafd 	bl	80037e8 <memcpy>
 80031ee:	89a3      	ldrh	r3, [r4, #12]
 80031f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f8:	81a3      	strh	r3, [r4, #12]
 80031fa:	6126      	str	r6, [r4, #16]
 80031fc:	444e      	add	r6, r9
 80031fe:	6026      	str	r6, [r4, #0]
 8003200:	463e      	mov	r6, r7
 8003202:	6165      	str	r5, [r4, #20]
 8003204:	eba5 0509 	sub.w	r5, r5, r9
 8003208:	60a5      	str	r5, [r4, #8]
 800320a:	42be      	cmp	r6, r7
 800320c:	d900      	bls.n	8003210 <__ssputs_r+0x70>
 800320e:	463e      	mov	r6, r7
 8003210:	4632      	mov	r2, r6
 8003212:	4641      	mov	r1, r8
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	f000 faaf 	bl	8003778 <memmove>
 800321a:	2000      	movs	r0, #0
 800321c:	68a3      	ldr	r3, [r4, #8]
 800321e:	1b9b      	subs	r3, r3, r6
 8003220:	60a3      	str	r3, [r4, #8]
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	4433      	add	r3, r6
 8003226:	6023      	str	r3, [r4, #0]
 8003228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322c:	462a      	mov	r2, r5
 800322e:	f000 fae9 	bl	8003804 <_realloc_r>
 8003232:	4606      	mov	r6, r0
 8003234:	2800      	cmp	r0, #0
 8003236:	d1e0      	bne.n	80031fa <__ssputs_r+0x5a>
 8003238:	4650      	mov	r0, sl
 800323a:	6921      	ldr	r1, [r4, #16]
 800323c:	f7ff febc 	bl	8002fb8 <_free_r>
 8003240:	230c      	movs	r3, #12
 8003242:	f8ca 3000 	str.w	r3, [sl]
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	e7e9      	b.n	8003228 <__ssputs_r+0x88>

08003254 <_svfiprintf_r>:
 8003254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	4698      	mov	r8, r3
 800325a:	898b      	ldrh	r3, [r1, #12]
 800325c:	4607      	mov	r7, r0
 800325e:	061b      	lsls	r3, r3, #24
 8003260:	460d      	mov	r5, r1
 8003262:	4614      	mov	r4, r2
 8003264:	b09d      	sub	sp, #116	; 0x74
 8003266:	d50e      	bpl.n	8003286 <_svfiprintf_r+0x32>
 8003268:	690b      	ldr	r3, [r1, #16]
 800326a:	b963      	cbnz	r3, 8003286 <_svfiprintf_r+0x32>
 800326c:	2140      	movs	r1, #64	; 0x40
 800326e:	f7ff ff0b 	bl	8003088 <_malloc_r>
 8003272:	6028      	str	r0, [r5, #0]
 8003274:	6128      	str	r0, [r5, #16]
 8003276:	b920      	cbnz	r0, 8003282 <_svfiprintf_r+0x2e>
 8003278:	230c      	movs	r3, #12
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	e0d0      	b.n	8003424 <_svfiprintf_r+0x1d0>
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	616b      	str	r3, [r5, #20]
 8003286:	2300      	movs	r3, #0
 8003288:	9309      	str	r3, [sp, #36]	; 0x24
 800328a:	2320      	movs	r3, #32
 800328c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003290:	2330      	movs	r3, #48	; 0x30
 8003292:	f04f 0901 	mov.w	r9, #1
 8003296:	f8cd 800c 	str.w	r8, [sp, #12]
 800329a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800343c <_svfiprintf_r+0x1e8>
 800329e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032a2:	4623      	mov	r3, r4
 80032a4:	469a      	mov	sl, r3
 80032a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032aa:	b10a      	cbz	r2, 80032b0 <_svfiprintf_r+0x5c>
 80032ac:	2a25      	cmp	r2, #37	; 0x25
 80032ae:	d1f9      	bne.n	80032a4 <_svfiprintf_r+0x50>
 80032b0:	ebba 0b04 	subs.w	fp, sl, r4
 80032b4:	d00b      	beq.n	80032ce <_svfiprintf_r+0x7a>
 80032b6:	465b      	mov	r3, fp
 80032b8:	4622      	mov	r2, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	4638      	mov	r0, r7
 80032be:	f7ff ff6f 	bl	80031a0 <__ssputs_r>
 80032c2:	3001      	adds	r0, #1
 80032c4:	f000 80a9 	beq.w	800341a <_svfiprintf_r+0x1c6>
 80032c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ca:	445a      	add	r2, fp
 80032cc:	9209      	str	r2, [sp, #36]	; 0x24
 80032ce:	f89a 3000 	ldrb.w	r3, [sl]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a1 	beq.w	800341a <_svfiprintf_r+0x1c6>
 80032d8:	2300      	movs	r3, #0
 80032da:	f04f 32ff 	mov.w	r2, #4294967295
 80032de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032e2:	f10a 0a01 	add.w	sl, sl, #1
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	9307      	str	r3, [sp, #28]
 80032ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ee:	931a      	str	r3, [sp, #104]	; 0x68
 80032f0:	4654      	mov	r4, sl
 80032f2:	2205      	movs	r2, #5
 80032f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f8:	4850      	ldr	r0, [pc, #320]	; (800343c <_svfiprintf_r+0x1e8>)
 80032fa:	f000 fa67 	bl	80037cc <memchr>
 80032fe:	9a04      	ldr	r2, [sp, #16]
 8003300:	b9d8      	cbnz	r0, 800333a <_svfiprintf_r+0xe6>
 8003302:	06d0      	lsls	r0, r2, #27
 8003304:	bf44      	itt	mi
 8003306:	2320      	movmi	r3, #32
 8003308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800330c:	0711      	lsls	r1, r2, #28
 800330e:	bf44      	itt	mi
 8003310:	232b      	movmi	r3, #43	; 0x2b
 8003312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003316:	f89a 3000 	ldrb.w	r3, [sl]
 800331a:	2b2a      	cmp	r3, #42	; 0x2a
 800331c:	d015      	beq.n	800334a <_svfiprintf_r+0xf6>
 800331e:	4654      	mov	r4, sl
 8003320:	2000      	movs	r0, #0
 8003322:	f04f 0c0a 	mov.w	ip, #10
 8003326:	9a07      	ldr	r2, [sp, #28]
 8003328:	4621      	mov	r1, r4
 800332a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800332e:	3b30      	subs	r3, #48	; 0x30
 8003330:	2b09      	cmp	r3, #9
 8003332:	d94d      	bls.n	80033d0 <_svfiprintf_r+0x17c>
 8003334:	b1b0      	cbz	r0, 8003364 <_svfiprintf_r+0x110>
 8003336:	9207      	str	r2, [sp, #28]
 8003338:	e014      	b.n	8003364 <_svfiprintf_r+0x110>
 800333a:	eba0 0308 	sub.w	r3, r0, r8
 800333e:	fa09 f303 	lsl.w	r3, r9, r3
 8003342:	4313      	orrs	r3, r2
 8003344:	46a2      	mov	sl, r4
 8003346:	9304      	str	r3, [sp, #16]
 8003348:	e7d2      	b.n	80032f0 <_svfiprintf_r+0x9c>
 800334a:	9b03      	ldr	r3, [sp, #12]
 800334c:	1d19      	adds	r1, r3, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	9103      	str	r1, [sp, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	bfbb      	ittet	lt
 8003356:	425b      	neglt	r3, r3
 8003358:	f042 0202 	orrlt.w	r2, r2, #2
 800335c:	9307      	strge	r3, [sp, #28]
 800335e:	9307      	strlt	r3, [sp, #28]
 8003360:	bfb8      	it	lt
 8003362:	9204      	strlt	r2, [sp, #16]
 8003364:	7823      	ldrb	r3, [r4, #0]
 8003366:	2b2e      	cmp	r3, #46	; 0x2e
 8003368:	d10c      	bne.n	8003384 <_svfiprintf_r+0x130>
 800336a:	7863      	ldrb	r3, [r4, #1]
 800336c:	2b2a      	cmp	r3, #42	; 0x2a
 800336e:	d134      	bne.n	80033da <_svfiprintf_r+0x186>
 8003370:	9b03      	ldr	r3, [sp, #12]
 8003372:	3402      	adds	r4, #2
 8003374:	1d1a      	adds	r2, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9203      	str	r2, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfb8      	it	lt
 800337e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003382:	9305      	str	r3, [sp, #20]
 8003384:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003440 <_svfiprintf_r+0x1ec>
 8003388:	2203      	movs	r2, #3
 800338a:	4650      	mov	r0, sl
 800338c:	7821      	ldrb	r1, [r4, #0]
 800338e:	f000 fa1d 	bl	80037cc <memchr>
 8003392:	b138      	cbz	r0, 80033a4 <_svfiprintf_r+0x150>
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	9b04      	ldr	r3, [sp, #16]
 8003398:	eba0 000a 	sub.w	r0, r0, sl
 800339c:	4082      	lsls	r2, r0
 800339e:	4313      	orrs	r3, r2
 80033a0:	3401      	adds	r4, #1
 80033a2:	9304      	str	r3, [sp, #16]
 80033a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a8:	2206      	movs	r2, #6
 80033aa:	4826      	ldr	r0, [pc, #152]	; (8003444 <_svfiprintf_r+0x1f0>)
 80033ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b0:	f000 fa0c 	bl	80037cc <memchr>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d038      	beq.n	800342a <_svfiprintf_r+0x1d6>
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <_svfiprintf_r+0x1f4>)
 80033ba:	bb1b      	cbnz	r3, 8003404 <_svfiprintf_r+0x1b0>
 80033bc:	9b03      	ldr	r3, [sp, #12]
 80033be:	3307      	adds	r3, #7
 80033c0:	f023 0307 	bic.w	r3, r3, #7
 80033c4:	3308      	adds	r3, #8
 80033c6:	9303      	str	r3, [sp, #12]
 80033c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ca:	4433      	add	r3, r6
 80033cc:	9309      	str	r3, [sp, #36]	; 0x24
 80033ce:	e768      	b.n	80032a2 <_svfiprintf_r+0x4e>
 80033d0:	460c      	mov	r4, r1
 80033d2:	2001      	movs	r0, #1
 80033d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80033d8:	e7a6      	b.n	8003328 <_svfiprintf_r+0xd4>
 80033da:	2300      	movs	r3, #0
 80033dc:	f04f 0c0a 	mov.w	ip, #10
 80033e0:	4619      	mov	r1, r3
 80033e2:	3401      	adds	r4, #1
 80033e4:	9305      	str	r3, [sp, #20]
 80033e6:	4620      	mov	r0, r4
 80033e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ec:	3a30      	subs	r2, #48	; 0x30
 80033ee:	2a09      	cmp	r2, #9
 80033f0:	d903      	bls.n	80033fa <_svfiprintf_r+0x1a6>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0c6      	beq.n	8003384 <_svfiprintf_r+0x130>
 80033f6:	9105      	str	r1, [sp, #20]
 80033f8:	e7c4      	b.n	8003384 <_svfiprintf_r+0x130>
 80033fa:	4604      	mov	r4, r0
 80033fc:	2301      	movs	r3, #1
 80033fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003402:	e7f0      	b.n	80033e6 <_svfiprintf_r+0x192>
 8003404:	ab03      	add	r3, sp, #12
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	462a      	mov	r2, r5
 800340a:	4638      	mov	r0, r7
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <_svfiprintf_r+0x1f8>)
 800340e:	a904      	add	r1, sp, #16
 8003410:	f3af 8000 	nop.w
 8003414:	1c42      	adds	r2, r0, #1
 8003416:	4606      	mov	r6, r0
 8003418:	d1d6      	bne.n	80033c8 <_svfiprintf_r+0x174>
 800341a:	89ab      	ldrh	r3, [r5, #12]
 800341c:	065b      	lsls	r3, r3, #25
 800341e:	f53f af2d 	bmi.w	800327c <_svfiprintf_r+0x28>
 8003422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003424:	b01d      	add	sp, #116	; 0x74
 8003426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342a:	ab03      	add	r3, sp, #12
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	462a      	mov	r2, r5
 8003430:	4638      	mov	r0, r7
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <_svfiprintf_r+0x1f8>)
 8003434:	a904      	add	r1, sp, #16
 8003436:	f000 f87d 	bl	8003534 <_printf_i>
 800343a:	e7eb      	b.n	8003414 <_svfiprintf_r+0x1c0>
 800343c:	080038be 	.word	0x080038be
 8003440:	080038c4 	.word	0x080038c4
 8003444:	080038c8 	.word	0x080038c8
 8003448:	00000000 	.word	0x00000000
 800344c:	080031a1 	.word	0x080031a1

08003450 <_printf_common>:
 8003450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003454:	4616      	mov	r6, r2
 8003456:	4699      	mov	r9, r3
 8003458:	688a      	ldr	r2, [r1, #8]
 800345a:	690b      	ldr	r3, [r1, #16]
 800345c:	4607      	mov	r7, r0
 800345e:	4293      	cmp	r3, r2
 8003460:	bfb8      	it	lt
 8003462:	4613      	movlt	r3, r2
 8003464:	6033      	str	r3, [r6, #0]
 8003466:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800346a:	460c      	mov	r4, r1
 800346c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003470:	b10a      	cbz	r2, 8003476 <_printf_common+0x26>
 8003472:	3301      	adds	r3, #1
 8003474:	6033      	str	r3, [r6, #0]
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	0699      	lsls	r1, r3, #26
 800347a:	bf42      	ittt	mi
 800347c:	6833      	ldrmi	r3, [r6, #0]
 800347e:	3302      	addmi	r3, #2
 8003480:	6033      	strmi	r3, [r6, #0]
 8003482:	6825      	ldr	r5, [r4, #0]
 8003484:	f015 0506 	ands.w	r5, r5, #6
 8003488:	d106      	bne.n	8003498 <_printf_common+0x48>
 800348a:	f104 0a19 	add.w	sl, r4, #25
 800348e:	68e3      	ldr	r3, [r4, #12]
 8003490:	6832      	ldr	r2, [r6, #0]
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	42ab      	cmp	r3, r5
 8003496:	dc2b      	bgt.n	80034f0 <_printf_common+0xa0>
 8003498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800349c:	1e13      	subs	r3, r2, #0
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	bf18      	it	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	0692      	lsls	r2, r2, #26
 80034a6:	d430      	bmi.n	800350a <_printf_common+0xba>
 80034a8:	4649      	mov	r1, r9
 80034aa:	4638      	mov	r0, r7
 80034ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b0:	47c0      	blx	r8
 80034b2:	3001      	adds	r0, #1
 80034b4:	d023      	beq.n	80034fe <_printf_common+0xae>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	6922      	ldr	r2, [r4, #16]
 80034ba:	f003 0306 	and.w	r3, r3, #6
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf14      	ite	ne
 80034c2:	2500      	movne	r5, #0
 80034c4:	6833      	ldreq	r3, [r6, #0]
 80034c6:	f04f 0600 	mov.w	r6, #0
 80034ca:	bf08      	it	eq
 80034cc:	68e5      	ldreq	r5, [r4, #12]
 80034ce:	f104 041a 	add.w	r4, r4, #26
 80034d2:	bf08      	it	eq
 80034d4:	1aed      	subeq	r5, r5, r3
 80034d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034da:	bf08      	it	eq
 80034dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bfc4      	itt	gt
 80034e4:	1a9b      	subgt	r3, r3, r2
 80034e6:	18ed      	addgt	r5, r5, r3
 80034e8:	42b5      	cmp	r5, r6
 80034ea:	d11a      	bne.n	8003522 <_printf_common+0xd2>
 80034ec:	2000      	movs	r0, #0
 80034ee:	e008      	b.n	8003502 <_printf_common+0xb2>
 80034f0:	2301      	movs	r3, #1
 80034f2:	4652      	mov	r2, sl
 80034f4:	4649      	mov	r1, r9
 80034f6:	4638      	mov	r0, r7
 80034f8:	47c0      	blx	r8
 80034fa:	3001      	adds	r0, #1
 80034fc:	d103      	bne.n	8003506 <_printf_common+0xb6>
 80034fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003506:	3501      	adds	r5, #1
 8003508:	e7c1      	b.n	800348e <_printf_common+0x3e>
 800350a:	2030      	movs	r0, #48	; 0x30
 800350c:	18e1      	adds	r1, r4, r3
 800350e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003518:	4422      	add	r2, r4
 800351a:	3302      	adds	r3, #2
 800351c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003520:	e7c2      	b.n	80034a8 <_printf_common+0x58>
 8003522:	2301      	movs	r3, #1
 8003524:	4622      	mov	r2, r4
 8003526:	4649      	mov	r1, r9
 8003528:	4638      	mov	r0, r7
 800352a:	47c0      	blx	r8
 800352c:	3001      	adds	r0, #1
 800352e:	d0e6      	beq.n	80034fe <_printf_common+0xae>
 8003530:	3601      	adds	r6, #1
 8003532:	e7d9      	b.n	80034e8 <_printf_common+0x98>

08003534 <_printf_i>:
 8003534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	7e0f      	ldrb	r7, [r1, #24]
 800353a:	4691      	mov	r9, r2
 800353c:	2f78      	cmp	r7, #120	; 0x78
 800353e:	4680      	mov	r8, r0
 8003540:	460c      	mov	r4, r1
 8003542:	469a      	mov	sl, r3
 8003544:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800354a:	d807      	bhi.n	800355c <_printf_i+0x28>
 800354c:	2f62      	cmp	r7, #98	; 0x62
 800354e:	d80a      	bhi.n	8003566 <_printf_i+0x32>
 8003550:	2f00      	cmp	r7, #0
 8003552:	f000 80d5 	beq.w	8003700 <_printf_i+0x1cc>
 8003556:	2f58      	cmp	r7, #88	; 0x58
 8003558:	f000 80c1 	beq.w	80036de <_printf_i+0x1aa>
 800355c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003564:	e03a      	b.n	80035dc <_printf_i+0xa8>
 8003566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800356a:	2b15      	cmp	r3, #21
 800356c:	d8f6      	bhi.n	800355c <_printf_i+0x28>
 800356e:	a101      	add	r1, pc, #4	; (adr r1, 8003574 <_printf_i+0x40>)
 8003570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003574:	080035cd 	.word	0x080035cd
 8003578:	080035e1 	.word	0x080035e1
 800357c:	0800355d 	.word	0x0800355d
 8003580:	0800355d 	.word	0x0800355d
 8003584:	0800355d 	.word	0x0800355d
 8003588:	0800355d 	.word	0x0800355d
 800358c:	080035e1 	.word	0x080035e1
 8003590:	0800355d 	.word	0x0800355d
 8003594:	0800355d 	.word	0x0800355d
 8003598:	0800355d 	.word	0x0800355d
 800359c:	0800355d 	.word	0x0800355d
 80035a0:	080036e7 	.word	0x080036e7
 80035a4:	0800360d 	.word	0x0800360d
 80035a8:	080036a1 	.word	0x080036a1
 80035ac:	0800355d 	.word	0x0800355d
 80035b0:	0800355d 	.word	0x0800355d
 80035b4:	08003709 	.word	0x08003709
 80035b8:	0800355d 	.word	0x0800355d
 80035bc:	0800360d 	.word	0x0800360d
 80035c0:	0800355d 	.word	0x0800355d
 80035c4:	0800355d 	.word	0x0800355d
 80035c8:	080036a9 	.word	0x080036a9
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	602a      	str	r2, [r5, #0]
 80035d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035dc:	2301      	movs	r3, #1
 80035de:	e0a0      	b.n	8003722 <_printf_i+0x1ee>
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	682b      	ldr	r3, [r5, #0]
 80035e4:	0607      	lsls	r7, r0, #24
 80035e6:	f103 0104 	add.w	r1, r3, #4
 80035ea:	6029      	str	r1, [r5, #0]
 80035ec:	d501      	bpl.n	80035f2 <_printf_i+0xbe>
 80035ee:	681e      	ldr	r6, [r3, #0]
 80035f0:	e003      	b.n	80035fa <_printf_i+0xc6>
 80035f2:	0646      	lsls	r6, r0, #25
 80035f4:	d5fb      	bpl.n	80035ee <_printf_i+0xba>
 80035f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035fa:	2e00      	cmp	r6, #0
 80035fc:	da03      	bge.n	8003606 <_printf_i+0xd2>
 80035fe:	232d      	movs	r3, #45	; 0x2d
 8003600:	4276      	negs	r6, r6
 8003602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003606:	230a      	movs	r3, #10
 8003608:	4859      	ldr	r0, [pc, #356]	; (8003770 <_printf_i+0x23c>)
 800360a:	e012      	b.n	8003632 <_printf_i+0xfe>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1d19      	adds	r1, r3, #4
 8003612:	6029      	str	r1, [r5, #0]
 8003614:	0605      	lsls	r5, r0, #24
 8003616:	d501      	bpl.n	800361c <_printf_i+0xe8>
 8003618:	681e      	ldr	r6, [r3, #0]
 800361a:	e002      	b.n	8003622 <_printf_i+0xee>
 800361c:	0641      	lsls	r1, r0, #25
 800361e:	d5fb      	bpl.n	8003618 <_printf_i+0xe4>
 8003620:	881e      	ldrh	r6, [r3, #0]
 8003622:	2f6f      	cmp	r7, #111	; 0x6f
 8003624:	bf0c      	ite	eq
 8003626:	2308      	moveq	r3, #8
 8003628:	230a      	movne	r3, #10
 800362a:	4851      	ldr	r0, [pc, #324]	; (8003770 <_printf_i+0x23c>)
 800362c:	2100      	movs	r1, #0
 800362e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003632:	6865      	ldr	r5, [r4, #4]
 8003634:	2d00      	cmp	r5, #0
 8003636:	bfa8      	it	ge
 8003638:	6821      	ldrge	r1, [r4, #0]
 800363a:	60a5      	str	r5, [r4, #8]
 800363c:	bfa4      	itt	ge
 800363e:	f021 0104 	bicge.w	r1, r1, #4
 8003642:	6021      	strge	r1, [r4, #0]
 8003644:	b90e      	cbnz	r6, 800364a <_printf_i+0x116>
 8003646:	2d00      	cmp	r5, #0
 8003648:	d04b      	beq.n	80036e2 <_printf_i+0x1ae>
 800364a:	4615      	mov	r5, r2
 800364c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003650:	fb03 6711 	mls	r7, r3, r1, r6
 8003654:	5dc7      	ldrb	r7, [r0, r7]
 8003656:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800365a:	4637      	mov	r7, r6
 800365c:	42bb      	cmp	r3, r7
 800365e:	460e      	mov	r6, r1
 8003660:	d9f4      	bls.n	800364c <_printf_i+0x118>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d10b      	bne.n	800367e <_printf_i+0x14a>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	07de      	lsls	r6, r3, #31
 800366a:	d508      	bpl.n	800367e <_printf_i+0x14a>
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	6861      	ldr	r1, [r4, #4]
 8003670:	4299      	cmp	r1, r3
 8003672:	bfde      	ittt	le
 8003674:	2330      	movle	r3, #48	; 0x30
 8003676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800367a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800367e:	1b52      	subs	r2, r2, r5
 8003680:	6122      	str	r2, [r4, #16]
 8003682:	464b      	mov	r3, r9
 8003684:	4621      	mov	r1, r4
 8003686:	4640      	mov	r0, r8
 8003688:	f8cd a000 	str.w	sl, [sp]
 800368c:	aa03      	add	r2, sp, #12
 800368e:	f7ff fedf 	bl	8003450 <_printf_common>
 8003692:	3001      	adds	r0, #1
 8003694:	d14a      	bne.n	800372c <_printf_i+0x1f8>
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
 800369a:	b004      	add	sp, #16
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f043 0320 	orr.w	r3, r3, #32
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	2778      	movs	r7, #120	; 0x78
 80036aa:	4832      	ldr	r0, [pc, #200]	; (8003774 <_printf_i+0x240>)
 80036ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	6829      	ldr	r1, [r5, #0]
 80036b4:	061f      	lsls	r7, r3, #24
 80036b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80036ba:	d402      	bmi.n	80036c2 <_printf_i+0x18e>
 80036bc:	065f      	lsls	r7, r3, #25
 80036be:	bf48      	it	mi
 80036c0:	b2b6      	uxthmi	r6, r6
 80036c2:	07df      	lsls	r7, r3, #31
 80036c4:	bf48      	it	mi
 80036c6:	f043 0320 	orrmi.w	r3, r3, #32
 80036ca:	6029      	str	r1, [r5, #0]
 80036cc:	bf48      	it	mi
 80036ce:	6023      	strmi	r3, [r4, #0]
 80036d0:	b91e      	cbnz	r6, 80036da <_printf_i+0x1a6>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f023 0320 	bic.w	r3, r3, #32
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	2310      	movs	r3, #16
 80036dc:	e7a6      	b.n	800362c <_printf_i+0xf8>
 80036de:	4824      	ldr	r0, [pc, #144]	; (8003770 <_printf_i+0x23c>)
 80036e0:	e7e4      	b.n	80036ac <_printf_i+0x178>
 80036e2:	4615      	mov	r5, r2
 80036e4:	e7bd      	b.n	8003662 <_printf_i+0x12e>
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	6826      	ldr	r6, [r4, #0]
 80036ea:	1d18      	adds	r0, r3, #4
 80036ec:	6961      	ldr	r1, [r4, #20]
 80036ee:	6028      	str	r0, [r5, #0]
 80036f0:	0635      	lsls	r5, r6, #24
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	d501      	bpl.n	80036fa <_printf_i+0x1c6>
 80036f6:	6019      	str	r1, [r3, #0]
 80036f8:	e002      	b.n	8003700 <_printf_i+0x1cc>
 80036fa:	0670      	lsls	r0, r6, #25
 80036fc:	d5fb      	bpl.n	80036f6 <_printf_i+0x1c2>
 80036fe:	8019      	strh	r1, [r3, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	4615      	mov	r5, r2
 8003704:	6123      	str	r3, [r4, #16]
 8003706:	e7bc      	b.n	8003682 <_printf_i+0x14e>
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	2100      	movs	r1, #0
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	602a      	str	r2, [r5, #0]
 8003710:	681d      	ldr	r5, [r3, #0]
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	4628      	mov	r0, r5
 8003716:	f000 f859 	bl	80037cc <memchr>
 800371a:	b108      	cbz	r0, 8003720 <_printf_i+0x1ec>
 800371c:	1b40      	subs	r0, r0, r5
 800371e:	6060      	str	r0, [r4, #4]
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	2300      	movs	r3, #0
 8003726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372a:	e7aa      	b.n	8003682 <_printf_i+0x14e>
 800372c:	462a      	mov	r2, r5
 800372e:	4649      	mov	r1, r9
 8003730:	4640      	mov	r0, r8
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	47d0      	blx	sl
 8003736:	3001      	adds	r0, #1
 8003738:	d0ad      	beq.n	8003696 <_printf_i+0x162>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	079b      	lsls	r3, r3, #30
 800373e:	d413      	bmi.n	8003768 <_printf_i+0x234>
 8003740:	68e0      	ldr	r0, [r4, #12]
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	4298      	cmp	r0, r3
 8003746:	bfb8      	it	lt
 8003748:	4618      	movlt	r0, r3
 800374a:	e7a6      	b.n	800369a <_printf_i+0x166>
 800374c:	2301      	movs	r3, #1
 800374e:	4632      	mov	r2, r6
 8003750:	4649      	mov	r1, r9
 8003752:	4640      	mov	r0, r8
 8003754:	47d0      	blx	sl
 8003756:	3001      	adds	r0, #1
 8003758:	d09d      	beq.n	8003696 <_printf_i+0x162>
 800375a:	3501      	adds	r5, #1
 800375c:	68e3      	ldr	r3, [r4, #12]
 800375e:	9903      	ldr	r1, [sp, #12]
 8003760:	1a5b      	subs	r3, r3, r1
 8003762:	42ab      	cmp	r3, r5
 8003764:	dcf2      	bgt.n	800374c <_printf_i+0x218>
 8003766:	e7eb      	b.n	8003740 <_printf_i+0x20c>
 8003768:	2500      	movs	r5, #0
 800376a:	f104 0619 	add.w	r6, r4, #25
 800376e:	e7f5      	b.n	800375c <_printf_i+0x228>
 8003770:	080038cf 	.word	0x080038cf
 8003774:	080038e0 	.word	0x080038e0

08003778 <memmove>:
 8003778:	4288      	cmp	r0, r1
 800377a:	b510      	push	{r4, lr}
 800377c:	eb01 0402 	add.w	r4, r1, r2
 8003780:	d902      	bls.n	8003788 <memmove+0x10>
 8003782:	4284      	cmp	r4, r0
 8003784:	4623      	mov	r3, r4
 8003786:	d807      	bhi.n	8003798 <memmove+0x20>
 8003788:	1e43      	subs	r3, r0, #1
 800378a:	42a1      	cmp	r1, r4
 800378c:	d008      	beq.n	80037a0 <memmove+0x28>
 800378e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003796:	e7f8      	b.n	800378a <memmove+0x12>
 8003798:	4601      	mov	r1, r0
 800379a:	4402      	add	r2, r0
 800379c:	428a      	cmp	r2, r1
 800379e:	d100      	bne.n	80037a2 <memmove+0x2a>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037aa:	e7f7      	b.n	800379c <memmove+0x24>

080037ac <_sbrk_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	2300      	movs	r3, #0
 80037b0:	4d05      	ldr	r5, [pc, #20]	; (80037c8 <_sbrk_r+0x1c>)
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	f7fd f976 	bl	8000aa8 <_sbrk>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d102      	bne.n	80037c6 <_sbrk_r+0x1a>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	b103      	cbz	r3, 80037c6 <_sbrk_r+0x1a>
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	20000330 	.word	0x20000330

080037cc <memchr>:
 80037cc:	4603      	mov	r3, r0
 80037ce:	b510      	push	{r4, lr}
 80037d0:	b2c9      	uxtb	r1, r1
 80037d2:	4402      	add	r2, r0
 80037d4:	4293      	cmp	r3, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	d101      	bne.n	80037de <memchr+0x12>
 80037da:	2000      	movs	r0, #0
 80037dc:	e003      	b.n	80037e6 <memchr+0x1a>
 80037de:	7804      	ldrb	r4, [r0, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	428c      	cmp	r4, r1
 80037e4:	d1f6      	bne.n	80037d4 <memchr+0x8>
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <memcpy>:
 80037e8:	440a      	add	r2, r1
 80037ea:	4291      	cmp	r1, r2
 80037ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f0:	d100      	bne.n	80037f4 <memcpy+0xc>
 80037f2:	4770      	bx	lr
 80037f4:	b510      	push	{r4, lr}
 80037f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fa:	4291      	cmp	r1, r2
 80037fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003800:	d1f9      	bne.n	80037f6 <memcpy+0xe>
 8003802:	bd10      	pop	{r4, pc}

08003804 <_realloc_r>:
 8003804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003808:	4680      	mov	r8, r0
 800380a:	4614      	mov	r4, r2
 800380c:	460e      	mov	r6, r1
 800380e:	b921      	cbnz	r1, 800381a <_realloc_r+0x16>
 8003810:	4611      	mov	r1, r2
 8003812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003816:	f7ff bc37 	b.w	8003088 <_malloc_r>
 800381a:	b92a      	cbnz	r2, 8003828 <_realloc_r+0x24>
 800381c:	f7ff fbcc 	bl	8002fb8 <_free_r>
 8003820:	4625      	mov	r5, r4
 8003822:	4628      	mov	r0, r5
 8003824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003828:	f000 f81b 	bl	8003862 <_malloc_usable_size_r>
 800382c:	4284      	cmp	r4, r0
 800382e:	4607      	mov	r7, r0
 8003830:	d802      	bhi.n	8003838 <_realloc_r+0x34>
 8003832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003836:	d812      	bhi.n	800385e <_realloc_r+0x5a>
 8003838:	4621      	mov	r1, r4
 800383a:	4640      	mov	r0, r8
 800383c:	f7ff fc24 	bl	8003088 <_malloc_r>
 8003840:	4605      	mov	r5, r0
 8003842:	2800      	cmp	r0, #0
 8003844:	d0ed      	beq.n	8003822 <_realloc_r+0x1e>
 8003846:	42bc      	cmp	r4, r7
 8003848:	4622      	mov	r2, r4
 800384a:	4631      	mov	r1, r6
 800384c:	bf28      	it	cs
 800384e:	463a      	movcs	r2, r7
 8003850:	f7ff ffca 	bl	80037e8 <memcpy>
 8003854:	4631      	mov	r1, r6
 8003856:	4640      	mov	r0, r8
 8003858:	f7ff fbae 	bl	8002fb8 <_free_r>
 800385c:	e7e1      	b.n	8003822 <_realloc_r+0x1e>
 800385e:	4635      	mov	r5, r6
 8003860:	e7df      	b.n	8003822 <_realloc_r+0x1e>

08003862 <_malloc_usable_size_r>:
 8003862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003866:	1f18      	subs	r0, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	bfbc      	itt	lt
 800386c:	580b      	ldrlt	r3, [r1, r0]
 800386e:	18c0      	addlt	r0, r0, r3
 8003870:	4770      	bx	lr
	...

08003874 <_init>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr

08003880 <_fini>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr
